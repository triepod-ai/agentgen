#!/bin/bash

# Claude Code Agent Hub - Symlink-Based Installer
# Install agents via symbolic links from the central agentgen hub

set -e

# Colors for output - with proper terminal detection
if [[ -t 1 ]] || [[ "${FORCE_COLOR:-}" == "1" ]] || [[ "${CLICOLOR_FORCE:-}" == "1" ]]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    CYAN='\033[0;36m'
    PURPLE='\033[0;35m'
    NC='\033[0m' # No Color
else
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    CYAN=''
    PURPLE=''
    NC=''
fi

# Disable colors if NO_COLOR is set
if [[ "${NO_COLOR:-}" != "" ]]; then
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    CYAN=''
    PURPLE=''
    NC=''
fi

# Default values
FORCE=false
DRY_RUN=false
VERBOSE=false
GLOBAL_INSTALL=false
PROJECT_PATH=""
PROFILE=""
HEALTH_CHECK=false
REPAIR=false

# Script directory and hub location
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
AGENTS_HUB="$SCRIPT_DIR/agents"

# Usage information
show_usage() {
    cat << EOF
${BLUE}Claude Code Agent Hub - Symlink Installer${NC}

${YELLOW}USAGE:${NC}
    $0 [OPTIONS] [TARGET_PATH]

${YELLOW}INSTALLATION MODES:${NC}
    ${GREEN}--global${NC}           Install agents globally (~/.claude/agents/)
    ${GREEN}--project PATH${NC}     Install agents to specific project
    ${GREEN}TARGET_PATH${NC}        Install agents to specified directory (legacy)

${YELLOW}PROFILES:${NC}
    ${GREEN}--core${NC}             Essential agents (recommended minimum)
    ${GREEN}--development${NC}      Frontend, backend, full-stack development
    ${GREEN}--specialists${NC}      Domain experts with deep knowledge
    ${GREEN}--infrastructure${NC}   DevOps, deployment, monitoring
    ${GREEN}--quality${NC}          Testing, code review, QA
    ${GREEN}--content${NC}          Documentation, writing, localization
    ${GREEN}--data${NC}             Data processing, AI/ML, database
    ${GREEN}--tools${NC}            Utilities and specialized tools
    ${GREEN}--simple${NC}           Lightweight agents for basic tasks
    ${GREEN}--all${NC}              Install all available agents

${YELLOW}MAINTENANCE:${NC}
    ${GREEN}--health${NC}           Check health of symlinks
    ${GREEN}--repair${NC}           Repair broken symlinks
    ${GREEN}--list${NC}             List available agents by category

${YELLOW}OPTIONS:${NC}
    ${GREEN}--force${NC}            Overwrite existing files
    ${GREEN}--dry-run${NC}          Show what would be done without making changes
    ${GREEN}--verbose${NC}          Show detailed output
    ${GREEN}--help${NC}             Show this help message

${YELLOW}EXAMPLES:${NC}
    # Install core agents globally
    $0 --global --core

    # Install development agents to a project
    $0 --project /path/to/project --development

    # Install all agents globally with verbose output
    $0 --global --all --verbose

    # Check health of existing symlinks
    $0 --health

    # Repair broken symlinks in a project
    $0 --project /path/to/project --repair

${YELLOW}BENEFITS OF SYMLINKS:${NC}
    • Single source of truth for all agents
    • Instant propagation of updates
    • Space efficient (no file duplication)  
    • Easy maintenance and version control

EOF
}

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

log_verbose() {
    if [[ "$VERBOSE" == "true" ]]; then
        echo -e "${CYAN}[VERBOSE]${NC} $1"
    fi
}

# Check if hub directory exists
check_hub() {
    if [[ ! -d "$AGENTS_HUB" ]]; then
        log_error "Agents hub not found at: $AGENTS_HUB"
        log_error "Please ensure you're running this from the agentgen directory"
        exit 1
    fi
    log_verbose "Using agents hub: $AGENTS_HUB"
}

# Get list of agents in a category
get_category_agents() {
    local category="$1"
    local category_path="$AGENTS_HUB/$category"
    
    if [[ -d "$category_path" ]]; then
        find "$category_path" -name "*.md" -type f | sort
    fi
}

# Get all agents for a profile
get_profile_agents() {
    local profile="$1"
    local agents=()
    
    case "$profile" in
        "core")
            agents+=($(get_category_agents "core"))
            ;;
        "development")
            agents+=($(get_category_agents "development"))
            ;;
        "specialists")
            agents+=($(get_category_agents "specialists"))
            ;;
        "infrastructure")
            agents+=($(get_category_agents "infrastructure"))
            ;;
        "quality")
            agents+=($(get_category_agents "quality"))
            ;;
        "content")
            agents+=($(get_category_agents "content"))
            ;;
        "data")
            agents+=($(get_category_agents "data"))
            ;;
        "tools")
            agents+=($(get_category_agents "tools"))
            ;;
        "simple")
            agents+=($(get_category_agents "simple"))
            ;;
        "all")
            for category in core development specialists infrastructure quality content data tools simple; do
                agents+=($(get_category_agents "$category"))
            done
            ;;
        *)
            log_error "Unknown profile: $profile"
            exit 1
            ;;
    esac
    
    printf "%s\n" "${agents[@]}"
}

# List available agents
list_agents() {
    log_info "Available agents by category:"
    echo
    
    for category in core development specialists infrastructure quality content data tools simple; do
        local category_path="$AGENTS_HUB/$category"
        if [[ -d "$category_path" ]]; then
            local agent_count=$(find "$category_path" -name "*.md" -type f | wc -l)
            echo -e "${PURPLE}[$category]${NC} ($agent_count agents)"
            
            find "$category_path" -name "*.md" -type f | sort | while read -r agent_file; do
                local agent_name=$(basename "$agent_file" .md)
                echo "  • $agent_name"
            done
            echo
        fi
    done
}

# Create symlink with proper error handling
create_symlink() {
    local source="$1"
    local target="$2"
    local agent_name=$(basename "$source" .md)
    
    log_verbose "Creating symlink: $target -> $source"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        echo -e "${CYAN}[DRY-RUN]${NC} Would create symlink: $target -> $source"
        return 0
    fi
    
    # Check if target already exists
    if [[ -e "$target" || -L "$target" ]]; then
        if [[ "$FORCE" == "true" ]]; then
            log_verbose "Removing existing file/link: $target"
            rm -f "$target"
        else
            log_warning "Skipping $agent_name (already exists, use --force to overwrite)"
            return 1
        fi
    fi
    
    # Create the symlink
    if ln -s "$source" "$target" 2>/dev/null; then
        log_success "Installed $agent_name"
        return 0
    else
        log_error "Failed to create symlink for $agent_name"
        return 1
    fi
}

# Install agents to target directory
install_agents() {
    local target_dir="$1"
    local profile="$2"
    
    # Create target directory if it doesn't exist
    if [[ ! -d "$target_dir" ]]; then
        log_info "Creating directory: $target_dir"
        if [[ "$DRY_RUN" != "true" ]]; then
            mkdir -p "$target_dir"
        fi
    fi
    
    # Get agents for the profile
    local agents
    mapfile -t agents < <(get_profile_agents "$profile")
    
    if [[ ${#agents[@]} -eq 0 ]]; then
        log_warning "No agents found for profile: $profile"
        return 1
    fi
    
    log_info "Installing ${#agents[@]} agents from profile '$profile' to: $target_dir"
    
    local success_count=0
    local skip_count=0
    
    for agent_file in "${agents[@]}"; do
        local agent_name=$(basename "$agent_file" .md)
        local target_file="$target_dir/$agent_name.md"
        
        if create_symlink "$agent_file" "$target_file"; then
            ((success_count++))
        else
            ((skip_count++))
        fi
    done
    
    echo
    log_success "Installation complete: $success_count installed, $skip_count skipped"
}

# Check health of symlinks
health_check() {
    local target_dir="$1"
    
    if [[ ! -d "$target_dir" ]]; then
        log_error "Directory not found: $target_dir"
        return 1
    fi
    
    log_info "Checking health of symlinks in: $target_dir"
    
    local total=0
    local working=0
    local broken=0
    
    find "$target_dir" -name "*.md" -type l | while read -r link; do
        ((total++))
        if [[ -e "$link" ]]; then
            ((working++))
            log_verbose "✓ $(basename "$link" .md) -> $(readlink "$link")"
        else
            ((broken++))
            log_warning "✗ $(basename "$link" .md) -> $(readlink "$link") (BROKEN)"
        fi
    done
    
    echo
    log_info "Health check complete: $working working, $broken broken out of $total total symlinks"
}

# Repair broken symlinks
repair_links() {
    local target_dir="$1"
    
    if [[ ! -d "$target_dir" ]]; then
        log_error "Directory not found: $target_dir"
        return 1
    fi
    
    log_info "Repairing broken symlinks in: $target_dir"
    
    local repaired=0
    
    find "$target_dir" -name "*.md" -type l | while read -r link; do
        if [[ ! -e "$link" ]]; then
            local agent_name=$(basename "$link" .md)
            log_warning "Found broken symlink: $agent_name"
            
            # Try to find the agent in the hub
            local found_agent=""
            for category in core development specialists infrastructure quality content data tools simple; do
                local candidate="$AGENTS_HUB/$category/$agent_name.md"
                if [[ -f "$candidate" ]]; then
                    found_agent="$candidate"
                    break
                fi
            done
            
            if [[ -n "$found_agent" ]]; then
                log_info "Repairing $agent_name -> $found_agent"
                rm -f "$link"
                if ln -s "$found_agent" "$link"; then
                    ((repaired++))
                    log_success "Repaired $agent_name"
                else
                    log_error "Failed to repair $agent_name"
                fi
            else
                log_warning "Could not find source for $agent_name in hub"
            fi
        fi
    done
    
    log_success "Repair complete: $repaired links repaired"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_usage
            exit 0
            ;;
        --global)
            GLOBAL_INSTALL=true
            shift
            ;;
        --project)
            PROJECT_PATH="$2"
            if [[ -z "$PROJECT_PATH" ]]; then
                log_error "--project requires a path argument"
                exit 1
            fi
            shift 2
            ;;
        --core|--development|--specialists|--infrastructure|--quality|--content|--data|--tools|--simple|--all)
            PROFILE="${1#--}"
            shift
            ;;
        --health)
            HEALTH_CHECK=true
            shift
            ;;
        --repair)
            REPAIR=true
            shift
            ;;
        --list)
            check_hub
            list_agents
            exit 0
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        -*)
            log_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
        *)
            # Legacy positional argument (target path)
            if [[ -z "$PROJECT_PATH" && "$GLOBAL_INSTALL" != "true" ]]; then
                PROJECT_PATH="$1"
            else
                log_error "Unexpected argument: $1"
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate arguments
check_hub

# Determine target directory
TARGET_DIR=""
if [[ "$GLOBAL_INSTALL" == "true" ]]; then
    TARGET_DIR="$HOME/.claude/agents"
    log_info "Installing agents globally to: $TARGET_DIR"
elif [[ -n "$PROJECT_PATH" ]]; then
    TARGET_DIR="$PROJECT_PATH/.claude/agents"
    log_info "Installing agents to project: $TARGET_DIR"
else
    log_error "Must specify either --global or --project PATH"
    show_usage
    exit 1
fi

# Handle special operations
if [[ "$HEALTH_CHECK" == "true" ]]; then
    health_check "$TARGET_DIR"
    exit 0
fi

if [[ "$REPAIR" == "true" ]]; then
    repair_links "$TARGET_DIR"
    exit 0
fi

# Validate profile selection
if [[ -z "$PROFILE" ]]; then
    log_error "Must specify a profile (--core, --development, --all, etc.)"
    show_usage
    exit 1
fi

# Install agents
install_agents "$TARGET_DIR" "$PROFILE"

log_info "Symlink-based agent installation complete!"
echo
echo -e "${YELLOW}Next steps:${NC}"
echo "• Test agents with Claude Code"
echo "• Run health check: $0 --health"
echo "• Update agents by modifying files in: $AGENTS_HUB"
echo "• Changes will propagate instantly to all installations"