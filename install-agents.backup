#!/bin/bash

# Claude Code Sub-Agents Installer
# Install subagents from the claude-code-sub-agents repository to a target project

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
FORCE=false
DRY_RUN=false
VERBOSE=false
INSTALL_ALL=false
SKIP_SPEAK_CHECK=false

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SUBMODULE_DIR="$SCRIPT_DIR/submodules/claude-code-sub-agents"

# Function to display help
show_help() {
    cat << EOF
Claude Code Sub-Agents Installer

USAGE:
    install-agents [OPTIONS] <target-project-path> [agent-names...]

OPTIONS:
    --help              Show this help message
    --force             Force installation, overwrite existing agents
    --all               Install all available agents
    --list              List all available agents
    --dry-run           Show what would be installed without making changes
    --verbose           Show detailed installation progress
    --skip-speak-check  Skip speak command validation

ARGUMENTS:
    target-project-path Path to the project where agents will be installed
    agent-names         Specific agents to install (optional if --all is used)

EXAMPLES:
    # Install specific agents
    install-agents /path/to/my-project code-reviewer test-automator

    # Install all agents
    install-agents --all /path/to/my-project

    # List available agents
    install-agents --list

    # Dry run to see what would be installed
    install-agents --dry-run --all /path/to/my-project

AGENT CATEGORIES:
    - business:          Product management and business analysis
    - data-ai:          Data engineering, AI/ML, and database optimization
    - development:      Frontend, backend, and full-stack development
    - infrastructure:   Cloud, DevOps, and performance engineering
    - quality-testing:  Code review, QA, and testing automation
    - security:         Security auditing and vulnerability assessment
    - specialization:   API documentation and specialized expertise

FEATURES:
    ✅ Selective agent installation
    ✅ Category-based organization
    ✅ Speak command integration support
    ✅ Conflict detection and resolution
    ✅ Backup of existing agents
    ✅ Dry-run mode for safe testing

EOF
}

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to list available agents
list_agents() {
    print_info "Available agents in claude-code-sub-agents repository:"
    echo ""
    
    # Check if submodule exists
    if [ ! -d "$SUBMODULE_DIR" ]; then
        print_error "Submodule not found. Please run: git submodule update --init --recursive"
        exit 1
    fi
    
    # List by category
    for category in business data-ai development infrastructure quality-testing security specialization; do
        if [ -d "$SUBMODULE_DIR/$category" ]; then
            echo -e "${GREEN}$category:${NC}"
            for agent in "$SUBMODULE_DIR/$category"/*.md; do
                if [ -f "$agent" ]; then
                    basename "$agent" .md | sed 's/^/  - /'
                fi
            done
            echo ""
        fi
    done
    
    # List root-level agents
    echo -e "${GREEN}general:${NC}"
    for agent in "$SUBMODULE_DIR"/*.md; do
        if [ -f "$agent" ] && [ "$(basename "$agent")" != "README.md" ] && [ "$(basename "$agent")" != "CLAUDE.md" ]; then
            basename "$agent" .md | sed 's/^/  - /'
        fi
    done
}

# Function to check if speak command is available
check_speak_command() {
    if [ "$SKIP_SPEAK_CHECK" = true ]; then
        return 0
    fi
    
    if command -v speak &> /dev/null; then
        print_success "Speak command found and available"
        return 0
    else
        print_warning "Speak command not found. TTS notifications will not be available."
        print_info "Install speak-app from: /home/bryan/bin/speak-app/"
        return 1
    fi
}

# Function to find agent file
find_agent_file() {
    local agent_name="$1"
    
    # Check in each category
    for category in business data-ai development infrastructure quality-testing security specialization; do
        if [ -f "$SUBMODULE_DIR/$category/$agent_name.md" ]; then
            echo "$SUBMODULE_DIR/$category/$agent_name.md"
            return 0
        fi
    done
    
    # Check in root
    if [ -f "$SUBMODULE_DIR/$agent_name.md" ]; then
        echo "$SUBMODULE_DIR/$agent_name.md"
        return 0
    fi
    
    return 1
}

# Function to install a single agent
install_agent() {
    local agent_file="$1"
    local target_dir="$2"
    local agent_name="$(basename "$agent_file")"
    
    local target_file="$target_dir/$agent_name"
    
    if [ "$DRY_RUN" = true ]; then
        if [ -f "$target_file" ]; then
            print_info "[DRY-RUN] Would backup existing agent: $agent_name"
        fi
        print_info "[DRY-RUN] Would install agent: $agent_name"
        return 0
    fi
    
    # Backup existing agent if it exists
    if [ -f "$target_file" ] && [ "$FORCE" = false ]; then
        print_warning "Agent already exists: $agent_name"
        read -p "Overwrite? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Skipping $agent_name"
            return 1
        fi
    fi
    
    if [ -f "$target_file" ]; then
        local backup_file="${target_file}.backup.$(date +%Y%m%d_%H%M%S)"
        [ "$VERBOSE" = true ] && print_info "Backing up existing agent to: $backup_file"
        cp "$target_file" "$backup_file"
    fi
    
    # Copy agent file
    [ "$VERBOSE" = true ] && print_info "Installing agent: $agent_name"
    cp "$agent_file" "$target_file"
    
    print_success "Installed: $agent_name"
    return 0
}

# Function to update CLAUDE.md with agent instructions
update_claude_md() {
    local target_project="$1"
    local claude_file="$target_project/CLAUDE.md"
    local installed_agents=()
    
    # Collect list of installed agents
    if [ -d "$target_project/.claude/agents" ]; then
        for agent_file in "$target_project/.claude/agents"/*.md; do
            if [ -f "$agent_file" ]; then
                local agent_name=$(basename "$agent_file" .md)
                installed_agents+=("$agent_name")
            fi
        done
    fi
    
    if [ ${#installed_agents[@]} -eq 0 ]; then
        [ "$VERBOSE" = true ] && print_info "No agents installed, skipping CLAUDE.md update"
        return 0
    fi
    
    [ "$DRY_RUN" = true ] && print_info "[DRY-RUN] Would update CLAUDE.md with agent instructions"
    [ "$DRY_RUN" = true ] && return 0
    
    # Check if CLAUDE.md exists
    local update_type="Creating"
    if [ -f "$claude_file" ]; then
        update_type="Updating"
        # Check if agent section already exists
        if grep -q "## Installed Sub-Agents" "$claude_file" 2>/dev/null; then
            print_info "Agent section already exists in CLAUDE.md, updating..."
            # Remove old agent section
            sed -i '/## Installed Sub-Agents/,/^## /{ /^## Installed Sub-Agents/d; /^## /!d; }' "$claude_file" 2>/dev/null || \
            sed -i '' '/## Installed Sub-Agents/,/^## /{ /^## Installed Sub-Agents/d; /^## /!d; }' "$claude_file"
        fi
    fi
    
    print_info "$update_type CLAUDE.md with agent instructions..."
    
    # Prepare the agent documentation section
    local agent_docs="

## Installed Sub-Agents

This project has the following specialized AI sub-agents available:

### Available Agents
"
    
    # Add each agent with proper categorization
    for agent in "${installed_agents[@]}"; do
        # Try to determine category
        local category="general"
        for cat in business data-ai development infrastructure quality-testing security specialization; do
            if [ -f "$SUBMODULE_DIR/$cat/$agent.md" ]; then
                category="$cat"
                break
            fi
        done
        
        agent_docs+="
- **$agent** ($category): Specialized agent for domain-specific tasks"
    done
    
    agent_docs+="

### Usage Instructions

These agents can be invoked in three ways:

1. **Automatic Invocation**: Claude Code will automatically select the appropriate agent based on your task
2. **Explicit Invocation**: Use phrases like \"Use the $agent to...\" or \"Have $agent handle this\"
3. **Agent Organizer**: For complex multi-agent workflows, the agent-organizer can coordinate multiple specialists

### Examples

\`\`\`bash
# Direct invocation
\"Use the code-reviewer to analyze this pull request\"
\"Have the security-auditor scan for vulnerabilities\"

# Multi-agent coordination
\"Use backend-architect to design the API, then have security-auditor review it\"
\`\`\`

### Agent Categories

- **business**: Product management and business analysis
- **data-ai**: Data engineering, AI/ML, and database optimization
- **development**: Frontend, backend, and full-stack development
- **infrastructure**: Cloud, DevOps, and performance engineering
- **quality-testing**: Code review, QA, and testing automation
- **security**: Security auditing and vulnerability assessment
- **specialization**: API documentation and specialized expertise

### Best Practices

- Trust automatic delegation for optimal agent selection
- Provide rich context about your requirements
- Use explicit invocation when you need specific expertise
- For complex projects, consider using the agent-organizer for multi-agent coordination

---
*Agents installed via claude-code-sub-agents repository*
"
    
    # Append to CLAUDE.md
    echo "$agent_docs" >> "$claude_file"
    
    print_success "CLAUDE.md updated with agent instructions"
}

# Function to install all agents
install_all_agents() {
    local target_dir="$1"
    local count=0
    local skipped=0
    
    print_info "Installing all available agents..."
    
    # Install from each category
    for category in business data-ai development infrastructure quality-testing security specialization; do
        if [ -d "$SUBMODULE_DIR/$category" ]; then
            [ "$VERBOSE" = true ] && print_info "Processing category: $category"
            for agent_file in "$SUBMODULE_DIR/$category"/*.md; do
                if [ -f "$agent_file" ]; then
                    if install_agent "$agent_file" "$target_dir"; then
                        ((count++))
                    else
                        ((skipped++))
                    fi
                fi
            done
        fi
    done
    
    # Install root-level agents
    for agent_file in "$SUBMODULE_DIR"/*.md; do
        if [ -f "$agent_file" ] && [ "$(basename "$agent_file")" != "README.md" ] && [ "$(basename "$agent_file")" != "CLAUDE.md" ]; then
            if install_agent "$agent_file" "$target_dir"; then
                ((count++))
            else
                ((skipped++))
            fi
        fi
    done
    
    print_success "Installation complete: $count agents installed, $skipped skipped"
}

# Parse command line arguments
POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            show_help
            exit 0
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --all)
            INSTALL_ALL=true
            shift
            ;;
        --list)
            list_agents
            exit 0
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --skip-speak-check)
            SKIP_SPEAK_CHECK=true
            shift
            ;;
        -*)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done

# Restore positional parameters
set -- "${POSITIONAL_ARGS[@]}"

# Check if submodule is initialized
if [ ! -d "$SUBMODULE_DIR" ]; then
    print_error "Submodule not found at: $SUBMODULE_DIR"
    print_info "Initializing submodule..."
    git submodule update --init --recursive
    if [ ! -d "$SUBMODULE_DIR" ]; then
        print_error "Failed to initialize submodule"
        exit 1
    fi
fi

# Validate arguments
if [ $# -eq 0 ]; then
    print_error "No target project path specified"
    show_help
    exit 1
fi

TARGET_PROJECT="$1"
shift

# Convert to absolute path
TARGET_PROJECT="$(cd "$TARGET_PROJECT" 2>/dev/null && pwd)" || {
    print_error "Target project path does not exist: $TARGET_PROJECT"
    exit 1
}

# Create .claude/agents directory if it doesn't exist
TARGET_AGENTS_DIR="$TARGET_PROJECT/.claude/agents"
if [ ! -d "$TARGET_AGENTS_DIR" ]; then
    print_info "Creating agents directory: $TARGET_AGENTS_DIR"
    mkdir -p "$TARGET_AGENTS_DIR"
fi

# Check speak command
check_speak_command || true

# Main installation logic
print_info "Installing agents to: $TARGET_AGENTS_DIR"
[ "$DRY_RUN" = true ] && print_warning "DRY-RUN MODE: No changes will be made"

if [ "$INSTALL_ALL" = true ]; then
    install_all_agents "$TARGET_AGENTS_DIR"
elif [ $# -eq 0 ]; then
    print_error "No agents specified. Use --all to install all agents or specify agent names."
    print_info "Use --list to see available agents"
    exit 1
else
    # Install specific agents
    count=0
    failed=0
    
    for agent_name in "$@"; do
        agent_file=$(find_agent_file "$agent_name")
        if [ $? -eq 0 ]; then
            if install_agent "$agent_file" "$TARGET_AGENTS_DIR"; then
                ((count++))
            else
                ((failed++))
            fi
        else
            print_error "Agent not found: $agent_name"
            ((failed++))
        fi
    done
    
    if [ $count -gt 0 ]; then
        print_success "Installation complete: $count agents installed"
    fi
    
    if [ $failed -gt 0 ]; then
        print_warning "$failed agents failed or skipped"
    fi
fi

# Update CLAUDE.md with agent instructions
if [ "$DRY_RUN" = false ]; then
    update_claude_md "$TARGET_PROJECT"
fi

# Final message
if [ "$DRY_RUN" = false ]; then
    print_success "✨ Agent installation complete!"
    print_info "Agents are now available in: $TARGET_AGENTS_DIR"
    print_info "Use them in Claude Code with @agent-name or explicit invocation"
fi