#!/bin/bash

# Claude Code Sub-Agents Installer
# Install subagents from the claude-code-sub-agents repository to a target project

set -e

# Colors for output - with proper terminal detection
if [[ -t 1 ]] || [[ "${FORCE_COLOR:-}" == "1" ]] || [[ "${CLICOLOR_FORCE:-}" == "1" ]]; then
    # Terminal supports colors or color is forced
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
else
    # No color support or NO_COLOR is set
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

# Disable colors if NO_COLOR is set (https://no-color.org)
if [[ "${NO_COLOR:-}" != "" ]]; then
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

# Default values - NEW DEFAULTS for better UX
FORCE=true              # Default to force for smoother updates
DRY_RUN=false
VERBOSE=false
INSTALL_ALL=false
SKIP_SPEAK_CHECK=false
PROFILE_NAME=""
SHOW_PROFILE=""
LIST_PROFILES=false
LIST_INSTALLED=false
INSTALL_SIMPLE=false
SIMPLE_READ=false
SIMPLE_WRITE=false
SIMPLE_BASH=false
SIMPLE_GREP=false
SIMPLE_EDIT=false
# New symlink mode variables - defaults set after argument parsing
SYMLINK_MODE=false      # Will be set to true as default after arg parsing
GLOBAL_INSTALL=false
HEALTH_CHECK=false
REPAIR=false
COPY_MODE=false
PROJECT_PATH="."        # Default to current directory

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SUBMODULE_DIR="$SCRIPT_DIR/submodules/claude-code-sub-agents"
PROFILES_DIR="$SCRIPT_DIR/profiles"
SIMPLE_AGENTS_DIR="$SCRIPT_DIR/simple-agents"
ARCHIVE_AGENTS_DIR="$SCRIPT_DIR/archive/agents"
AGENTS_HUB="$SCRIPT_DIR/agents"

# Function to display help
show_help() {
    cat << EOF
Claude Code Sub-Agents Installer

USAGE:
    ./install-agents [OPTIONS] [target-project-path] [agent-names...]

    ⚠️  MUST RUN FROM: /home/bryan/agentgen/ directory

INSTALLATION MODES (symlink to current directory is default):
    --symlink           Use symlink-based installation (DEFAULT) - single source of truth
    --copy              Use copy-based installation (legacy) - installs independent copies
    --project <path>    Install agents to specific project - PROJECT/.claude/agents/
    --global            Install agents globally (symlink mode only) - ~/.claude/agents/

NEW IMPROVED DEFAULTS:
    ✅ Symlink mode (was copy mode)
    ✅ Current directory (was explicit path required)  
    ✅ Force enabled (was disabled)

MAINTENANCE (symlink mode only):
    --health            Check health of existing symlinks
    --repair            Repair broken symlinks

OPTIONS:
    --help              Show this help message
    --force             Force installation, overwrite existing agents (DEFAULT - enabled by default)
    --all               Install all available agents
    --list              List all available agents
    --list-installed    List agents installed in target project
    --profile <name>    Install agents from a profile
    --list-profiles     List all available profiles
    --show-profile <name> Show details of a specific profile
    --dry-run           Show what would be installed without making changes
    --verbose           Show detailed installation progress
    --skip-speak-check  Skip speak command validation

SIMPLE AGENTS OPTIONS:
    --simple            Install all 21 simple single-tool agents
    --simple-read       Install Read-based agents (config, log, readme, env, screenshot)
    --simple-write      Install Write-based agents (gitignore, readme, env, changelog)
    --simple-bash       Install Bash-based agents (test, build, git, dependencies)
    --simple-grep       Install Grep-based agents (error, todo, import, function finders)
    --simple-edit       Install Edit-based agents (comment remover, whitespace, sorter, typo fixer)

ARGUMENTS:
    target-project-path Path to the project where agents will be installed (default: current directory)
    agent-names         Specific agents to install (optional if --all is used)

EXAMPLES:
    ⚠️  IMPORTANT: Must run from agentgen directory: cd /home/bryan/agentgen

    # SIMPLE USAGE (NEW DEFAULTS - symlink to current directory, force enabled)
    ./install-agents --profile development-team
    ./install-agents --profile core
    ./install-agents code-reviewer test-automator

    # EXPLICIT PROJECT PATH
    ./install-agents --profile development-team /path/to/my-project
    ./install-agents --project /path/to/my-project --profile core

    # LEGACY COPY MODE (for backward compatibility)
    ./install-agents --copy --profile development-team /path/to/my-project
    
    # GLOBAL INSTALLATION (symlink mode only - for core agents)
    ./install-agents --global --profile core

    # MAINTENANCE (symlink mode only)
    ./install-agents --health
    ./install-agents --repair

    # SIMPLE AGENTS
    ./install-agents --simple
    ./install-agents --simple-read --simple-bash

    # INFORMATION
    ./install-agents --list
    ./install-agents --list-installed /path/to/my-project
    ./install-agents --list-profiles
    ./install-agents --show-profile development-team
    ./install-agents --dry-run --profile development-team

AGENT CATEGORIES:
    - business:          Product management and business analysis
    - data-ai:          Data engineering, AI/ML, and database optimization
    - development:      Frontend, backend, and full-stack development
    - infrastructure:   Cloud, DevOps, and performance engineering
    - quality-testing:  Code review, QA, and testing automation
    - security:         Security auditing and vulnerability assessment
    - specialization:   API documentation and specialized expertise

SIMPLE AGENT CATEGORIES (Ultra-fast, single-tool focused):
    - Read Agents:      Config, log, README, env readers + screenshot analyzer
    - Write Agents:     .gitignore, README, env, changelog generators
    - Bash Agents:      Test runner, build runner, git executor, dependency installer
    - Grep Agents:      Error, TODO, import, function finders
    - Edit Agents:      Comment remover, whitespace fixer, import sorter, typo fixer

FEATURES:
    ✅ Selective agent installation
    ✅ Category-based organization
    ✅ Simple single-tool agents for ultra-fast loading
    ✅ Profile-based group installation
    ✅ Speak command integration support
    ✅ Conflict detection and resolution
    ✅ Backup of existing agents
    ✅ Dry-run mode for safe testing
    ✅ SYMLINK MODE: Single source of truth, instant updates, space efficient
    ✅ SYMLINK MODE: Health checks and repair functionality

EOF
}

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Additional logging functions for symlink mode (borrowed from install-agents-symlink)
log_verbose() {
    if [[ "$VERBOSE" == "true" ]]; then
        echo -e "${CYAN}[VERBOSE]${NC} $1"
    fi
}

# Check if hub directory exists (for symlink mode)
check_hub() {
    if [[ ! -d "$AGENTS_HUB" ]]; then
        print_error "Agents hub not found at: $AGENTS_HUB"
        print_error "Symlink mode requires the agents hub directory. Use --copy mode instead."
        return 1
    fi
    log_verbose "Using agents hub: $AGENTS_HUB"
    return 0
}

# Get list of agents in a category (for symlink mode)
get_category_agents() {
    local category="$1"
    local category_path="$AGENTS_HUB/$category"
    
    if [[ -d "$category_path" ]]; then
        find "$category_path" -name "*.md" -type f | sort
    fi
}

# Get all agents for a profile (symlink mode version)
get_profile_agents_symlink() {
    local profile="$1"
    local agents=()
    
    # FIRST: Check if it's a custom .profile file
    local profile_file="$PROFILES_DIR/$profile.profile"
    if [[ -f "$profile_file" ]]; then
        # Parse custom profile file like copy mode does
        while IFS= read -r line; do
            # Skip comments and empty lines
            if [[ "$line" =~ ^[[:space:]]*# ]] || [[ "$line" =~ ^[[:space:]]*$ ]] || [[ "$line" =~ ^name: ]] || [[ "$line" =~ ^description: ]] || [[ "$line" =~ ^agents: ]]; then
                continue
            fi
            
            # Extract agent name
            if [[ "$line" =~ ^[[:space:]]*-[[:space:]]*(.+)$ ]]; then
                local agent_name="${BASH_REMATCH[1]}"
                # Find the agent file in the hub
                local found_agent=""
                for category in core development specialists infrastructure quality content data tools simple; do
                    local candidate="$AGENTS_HUB/$category/$agent_name.md"
                    if [[ -f "$candidate" ]]; then
                        found_agent="$candidate"
                        break
                    fi
                done
                if [[ -n "$found_agent" ]]; then
                    agents+=("$found_agent")
                else
                    print_warning "Agent not found in hub: $agent_name (from profile: $profile)"
                fi
            elif [[ ! "$line" =~ ^[[:space:]]*# ]] && [[ ! "$line" =~ ^[[:space:]]*$ ]]; then
                # Handle simple list format (one agent per line)
                local agent_name=$(echo "$line" | xargs)  # trim whitespace
                if [ -n "$agent_name" ]; then
                    # Find the agent file in the hub
                    local found_agent=""
                    for category in core development specialists infrastructure quality content data tools simple; do
                        local candidate="$AGENTS_HUB/$category/$agent_name.md"
                        if [[ -f "$candidate" ]]; then
                            found_agent="$candidate"
                            break
                        fi
                    done
                    if [[ -n "$found_agent" ]]; then
                        agents+=("$found_agent")
                    else
                        print_warning "Agent not found in hub: $agent_name (from profile: $profile)"
                    fi
                fi
            fi
        done < "$profile_file"
        
        printf "%s\n" "${agents[@]}"
        return 0
    fi
    
    # FALLBACK: Handle built-in profiles
    case "$profile" in
        "core")
            agents+=($(get_category_agents "core"))
            ;;
        "development")
            agents+=($(get_category_agents "development"))
            ;;
        "specialists")
            agents+=($(get_category_agents "specialists"))
            ;;
        "infrastructure")
            agents+=($(get_category_agents "infrastructure"))
            ;;
        "quality")
            agents+=($(get_category_agents "quality"))
            ;;
        "content")
            agents+=($(get_category_agents "content"))
            ;;
        "data")
            agents+=($(get_category_agents "data"))
            ;;
        "tools")
            agents+=($(get_category_agents "tools"))
            ;;
        "simple")
            agents+=($(get_category_agents "simple"))
            ;;
        "all")
            for category in core development specialists infrastructure quality content data tools simple; do
                agents+=($(get_category_agents "$category"))
            done
            ;;
        *)
            print_error "Unknown profile: $profile"
            return 1
            ;;
    esac
    
    printf "%s\n" "${agents[@]}"
}

# Helper function to get display name (removes -enhanced suffix for target filename)
get_agent_display_name() {
    local agent_file="$1"
    local base_name=$(basename "$agent_file" .md)
    # Remove -enhanced suffix if present
    echo "${base_name%-enhanced}"
}

# Create symlink with proper error handling
create_symlink() {
    local source="$1"
    local target="$2"
    local agent_name=$(get_agent_display_name "$source")
    
    log_verbose "Creating symlink: $target -> $source"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        echo -e "${CYAN}[DRY-RUN]${NC} Would create symlink: $target -> $source"
        return 0
    fi
    
    # Check if target already exists
    if [[ -e "$target" || -L "$target" ]]; then
        if [[ "$FORCE" == "true" ]]; then
            log_verbose "Removing existing file/link: $target"
            rm -f "$target"
        else
            print_warning "Skipping $agent_name (already exists, use --force to overwrite)"
            return 1
        fi
    fi
    
    # Create the symlink
    if ln -s "$source" "$target" 2>/dev/null; then
        print_success "Installed $agent_name"
        return 0
    else
        print_error "Failed to create symlink for $agent_name"
        return 1
    fi
}

# Check health of symlinks
health_check() {
    local target_dir="$1"
    
    if [[ ! -d "$target_dir" ]]; then
        print_error "Directory not found: $target_dir"
        return 1
    fi
    
    print_info "Checking health of symlinks in: $target_dir"
    
    local total=0
    local working=0
    local broken=0
    
    find "$target_dir" -name "*.md" -type l 2>/dev/null | while read -r link; do
        ((total++))
        if [[ -e "$link" ]]; then
            ((working++))
            log_verbose "✓ $(basename "$link" .md) -> $(readlink "$link")"
        else
            ((broken++))
            print_warning "✗ $(basename "$link" .md) -> $(readlink "$link") (BROKEN)"
        fi
    done
    
    echo
    print_info "Health check complete: $working working, $broken broken out of $total total symlinks"
    return 0
}

# Repair broken symlinks
repair_links() {
    local target_dir="$1"
    
    if [[ ! -d "$target_dir" ]]; then
        print_error "Directory not found: $target_dir"
        return 1
    fi
    
    print_info "Repairing broken symlinks in: $target_dir"
    
    local repaired=0
    
    find "$target_dir" -name "*.md" -type l 2>/dev/null | while read -r link; do
        if [[ ! -e "$link" ]]; then
            local agent_name=$(basename "$link" .md)
            print_warning "Found broken symlink: $agent_name"
            
            # Try to find the agent in the hub
            local found_agent=""
            for category in core development specialists infrastructure quality content data tools simple; do
                local candidate="$AGENTS_HUB/$category/$agent_name.md"
                if [[ -f "$candidate" ]]; then
                    found_agent="$candidate"
                    break
                fi
            done
            
            if [[ -n "$found_agent" ]]; then
                print_info "Repairing $agent_name -> $found_agent"
                if [[ "$DRY_RUN" != "true" ]]; then
                    rm -f "$link"
                    if ln -s "$found_agent" "$link"; then
                        ((repaired++))
                        print_success "Repaired $agent_name"
                    else
                        print_error "Failed to repair $agent_name"
                    fi
                else
                    echo -e "${CYAN}[DRY-RUN]${NC} Would repair $agent_name -> $found_agent"
                fi
            else
                print_warning "Could not find source for $agent_name in hub"
            fi
        fi
    done
    
    print_success "Repair complete: $repaired links repaired"
}

# Function to list available profiles
list_profiles() {
    print_info "Available agent profiles:"
    echo ""
    
    if [ ! -d "$PROFILES_DIR" ]; then
        print_warning "No profiles directory found"
        return 0
    fi
    
    profile_count=0
    for profile_file in "$PROFILES_DIR"/*.profile; do
        if [ -f "$profile_file" ]; then
            set +e  # Temporarily disable exit on error
            profile_name=$(basename "$profile_file" .profile)
            description=$(grep "^description:" "$profile_file" 2>/dev/null | sed 's/^description: *//' || echo "No description")
            echo -e "${GREEN}$profile_name:${NC} $description"
            ((profile_count++))
            set -e  # Re-enable exit on error
        fi
    done
    
    if [ $profile_count -eq 0 ]; then
        print_warning "No profiles found in $PROFILES_DIR"
    fi
}

# Function to show profile details
show_profile() {
    local profile_name="$1"
    local profile_file="$PROFILES_DIR/$profile_name.profile"
    
    if [ ! -f "$profile_file" ]; then
        print_error "Profile not found: $profile_name"
        return 1
    fi
    
    print_info "Profile: $profile_name"
    echo ""
    
    # Show description
    local description=$(grep "^description:" "$profile_file" 2>/dev/null | sed 's/^description: *//' || echo "No description")
    echo -e "${YELLOW}Description:${NC} $description"
    echo ""
    
    # Show agents
    echo -e "${YELLOW}Agents to be installed:${NC}"
    local agent_count=0
    while IFS= read -r line; do
        # Skip comments and empty lines
        if [[ "$line" =~ ^[[:space:]]*# ]] || [[ "$line" =~ ^[[:space:]]*$ ]] || [[ "$line" =~ ^name: ]] || [[ "$line" =~ ^description: ]] || [[ "$line" =~ ^agents: ]]; then
            continue
        fi
        
        # Extract agent name
        if [[ "$line" =~ ^[[:space:]]*-[[:space:]]*(.+)$ ]]; then
            local agent_name="${BASH_REMATCH[1]}"
            echo "  - $agent_name"
            agent_count=$((agent_count + 1))
        elif [[ ! "$line" =~ ^[[:space:]]*# ]] && [[ ! "$line" =~ ^[[:space:]]*$ ]]; then
            # Handle simple list format (one agent per line)
            local agent_name=$(echo "$line" | xargs)  # trim whitespace
            if [ -n "$agent_name" ]; then
                echo "  - $agent_name"
                agent_count=$((agent_count + 1))
            fi
        fi
    done < "$profile_file"
    
    echo ""
    print_info "Total agents: $agent_count"
}

# Function to parse profile and get agent list
parse_profile() {
    local profile_name="$1"
    local profile_file="$PROFILES_DIR/$profile_name.profile"
    
    if [ ! -f "$profile_file" ]; then
        print_error "Profile not found: $profile_name"
        return 1
    fi
    
    local agents=()
    while IFS= read -r line; do
        # Skip comments and empty lines
        if [[ "$line" =~ ^[[:space:]]*# ]] || [[ "$line" =~ ^[[:space:]]*$ ]] || [[ "$line" =~ ^name: ]] || [[ "$line" =~ ^description: ]] || [[ "$line" =~ ^agents: ]]; then
            continue
        fi
        
        # Extract agent name
        if [[ "$line" =~ ^[[:space:]]*-[[:space:]]*(.+)$ ]]; then
            local agent_name="${BASH_REMATCH[1]}"
            agents+=("$agent_name")
        elif [[ ! "$line" =~ ^[[:space:]]*# ]] && [[ ! "$line" =~ ^[[:space:]]*$ ]]; then
            # Handle simple list format (one agent per line)
            local agent_name=$(echo "$line" | xargs)  # trim whitespace
            if [ -n "$agent_name" ]; then
                agents+=("$agent_name")
            fi
        fi
    done < "$profile_file"
    
    # Return agents as space-separated string
    printf '%s\n' "${agents[@]}"
}

# Function to install agents from profile
install_profile() {
    local profile_name="$1"
    local target_dir="$2"
    
    print_info "Installing profile: $profile_name"
    
    # Parse profile to get agent list
    local agents
    if ! agents=($(parse_profile "$profile_name")); then
        return 1
    fi
    
    if [ ${#agents[@]} -eq 0 ]; then
        print_warning "No agents found in profile: $profile_name"
        return 1
    fi
    
    print_info "Profile contains ${#agents[@]} agents"
    [ "$VERBOSE" = true ] && show_profile "$profile_name"
    
    local count=0
    local failed=0
    
    # Install each agent in the profile
    for agent_name in "${agents[@]}"; do
        set +e  # Temporarily disable exit on error for this loop iteration
        
        if agent_file=$(find_agent_file "$agent_name" 2>/dev/null) && [ -n "$agent_file" ]; then
            install_agent "$agent_file" "$target_dir"
            install_result=$?
            if [ $install_result -eq 0 ]; then
                ((count++))
            else
                ((failed++))
            fi
        else
            print_error "Agent not found: $agent_name (from profile: $profile_name)"
            ((failed++))
        fi
        
        set -e  # Re-enable exit on error
    done
    
    if [ $count -gt 0 ]; then
        print_success "Profile installation complete: $count agents installed"
    fi
    
    if [ $failed -gt 0 ]; then
        print_warning "$failed agents failed or skipped"
    fi
    
    return 0
}

# Function to list available agents
list_agents() {
    print_info "Available agents in claude-code-sub-agents repository:"
    echo ""
    
    # Function to get unique agent names with enhanced prioritization
    get_unique_agents() {
        local category_dir="$1"
        local agents=()
        local seen=()
        
        # First pass: collect enhanced agents
        for agent_file in "$category_dir"/*-enhanced.md; do
            if [ -f "$agent_file" ]; then
                local base_name=$(basename "$agent_file" -enhanced.md)
                agents+=("$base_name")
                seen+=("$base_name")
            fi
        done
        
        # Second pass: collect regular agents that don't have enhanced versions
        for agent_file in "$category_dir"/*.md; do
            if [ -f "$agent_file" ]; then
                local base_name=$(basename "$agent_file" .md)
                # Skip if this is an enhanced version or if we already have the enhanced version
                if [[ "$base_name" == *-enhanced ]] || [[ " ${seen[@]} " =~ " ${base_name} " ]]; then
                    continue
                fi
                agents+=("$base_name")
                seen+=("$base_name")
            fi
        done
        
        printf '%s\n' "${agents[@]}" | sort
    }
    
    # Function to check if enhanced version exists
    has_enhanced_version() {
        local category_dir="$1"
        local agent_name="$2"
        [ -f "$category_dir/$agent_name-enhanced.md" ]
    }
    
    # Check if submodule exists and list from it first
    if [ -d "$SUBMODULE_DIR" ]; then
        # List by category from submodule
        for category in business data-ai development infrastructure quality-testing security specialization; do
            if [ -d "$SUBMODULE_DIR/$category" ]; then
                echo -e "${GREEN}$category:${NC}"
                get_unique_agents "$SUBMODULE_DIR/$category" | while read -r agent; do
                    echo "  - $agent"
                done
                echo ""
            fi
        done
        
        # List root-level agents from submodule
        echo -e "${GREEN}general:${NC}"
        for agent in "$SUBMODULE_DIR"/*.md; do
            if [ -f "$agent" ] && [ "$(basename "$agent")" != "README.md" ] && [ "$(basename "$agent")" != "CLAUDE.md" ]; then
                basename "$agent" .md | sed 's/^/  - /'
            fi
        done
    fi
    
    # Also list from agents hub (local agents)
    if [ -d "$AGENTS_HUB" ]; then
        echo ""
        print_info "Additional agents from local hub:"
        echo ""
        
        # List by category from hub with enhanced prioritization
        for category in core development specialists infrastructure quality content data tools simple; do
            if [ -d "$AGENTS_HUB/$category" ]; then
                local agents_in_category=()
                while IFS= read -r agent; do
                    agents_in_category+=("$agent")
                done < <(get_unique_agents "$AGENTS_HUB/$category")
                
                if [ ${#agents_in_category[@]} -gt 0 ]; then
                    echo -e "${GREEN}$category:${NC}"
                    for agent in "${agents_in_category[@]}"; do
                        if has_enhanced_version "$AGENTS_HUB/$category" "$agent"; then
                            echo -e "  - $agent ${BLUE}(enhanced)${NC}"
                        else
                            echo "  - $agent"
                        fi
                    done
                    echo ""
                fi
            fi
        done
    fi
    
    # List simple agents
    echo ""
    print_info "Available simple single-tool agents:"
    echo ""
    if [ -d "$SIMPLE_AGENTS_DIR" ]; then
        local categories=("read:Read Agents (Analyzers)" "write:Write Agents (Generators)" "bash:Bash Agents (Executors)" "grep:Grep Agents (Searchers)" "edit:Edit Agents (Modifiers)")
        
        for category_info in "${categories[@]}"; do
            IFS=':' read -r category display_name <<< "$category_info"
            echo -e "${GREEN}$display_name:${NC}"
            
            agents=()
            while IFS= read -r agent; do
                agents+=("$agent")
            done < <(get_simple_agents_by_category "$category")
            for agent in "${agents[@]}"; do
                echo "  - $agent"
            done
            echo ""
        done
    fi
    
    # Also show available profiles
    echo ""
    list_profiles
}

# Function to list installed agents
list_installed_agents() {
    local target_project="$1"
    
    if [ -z "$target_project" ]; then
        print_error "Target project path required for --list-installed"
        print_info "Usage: install-agents --list-installed <project-path>"
        return 1
    fi
    
    # Convert to absolute path
    target_project="$(cd "$target_project" 2>/dev/null && pwd)" || {
        print_error "Target project path does not exist: $target_project"
        return 1
    }
    
    local agents_dir="$target_project/.claude/agents"
    
    if [ ! -d "$agents_dir" ]; then
        print_info "No agents directory found at: $agents_dir"
        print_info "No agents are currently installed in this project."
        return 0
    fi
    
    print_info "Installed agents in: $target_project"
    echo ""
    
    # Count total agents
    local total_agents=0
    local symlinked_agents=0
    local copied_agents=0
    
    # Check if any agents exist
    if ! ls "$agents_dir"/*.md >/dev/null 2>&1; then
        print_info "No agents are currently installed in this project."
        return 0
    fi
    
    # List all agents with their details
    echo -e "${GREEN}Installed Agents:${NC}"
    
    for agent_file in "$agents_dir"/*.md; do
        if [ -f "$agent_file" ]; then
            local agent_name=$(basename "$agent_file" .md)
            local install_type=""
            
            total_agents=$((total_agents + 1))
            
            # Determine if it's a symlink or copy
            if [ -L "$agent_file" ]; then
                install_type="symlink"
                symlinked_agents=$((symlinked_agents + 1))
                
                # Display the agent with symlink info
                echo "  - $agent_name ($install_type)"
                local target_path=$(readlink "$agent_file")
                echo "    └─ Source: $target_path"
            else
                install_type="copy"
                copied_agents=$((copied_agents + 1))
                
                # Display the agent
                echo "  - $agent_name ($install_type)"
            fi
        fi
    done
    
    echo ""
    
    # Summary
    echo -e "${BLUE}Summary:${NC}"
    echo "  • Total agents: $total_agents"
    if [ $symlinked_agents -gt 0 ]; then
        echo "  • Symlinked: $symlinked_agents (single source of truth)"
    fi
    if [ $copied_agents -gt 0 ]; then
        echo "  • Copied: $copied_agents (independent files)"
    fi
    echo ""
    
    # Usage examples
    echo -e "${YELLOW}Usage examples:${NC}"
    echo "  @agent-name         Direct @-mention invocation"
    echo "  Use the agent-name  Explicit invocation"
    echo "  [natural request]   Auto-activation based on task description"
}

# Function to check if speak command is available
check_speak_command() {
    if [ "$SKIP_SPEAK_CHECK" = true ]; then
        return 0
    fi
    
    if command -v speak &> /dev/null; then
        print_success "Speak command found and available"
        return 0
    else
        print_warning "Speak command not found. TTS notifications will not be available."
        print_info "Install speak-app from: /home/bryan/bin/speak-app/"
        return 1
    fi
}

# Function to find agent file with hub support and enhanced agent prioritization
find_agent_file() {
    local agent_name="$1"
    
    # PRIORITY 1: Check in agents hub first (highest priority)
    # First check for enhanced versions, then fallback to regular versions
    if [[ -d "$AGENTS_HUB" ]]; then
        # Check for enhanced version first (agent_name-enhanced.md)
        for category in core development specialists infrastructure quality content data tools simple; do
            if [[ -f "$AGENTS_HUB/$category/$agent_name-enhanced.md" ]]; then
                echo "$AGENTS_HUB/$category/$agent_name-enhanced.md"
                return 0
            fi
        done
        
        # Fallback to regular version (agent_name.md)
        for category in core development specialists infrastructure quality content data tools simple; do
            if [[ -f "$AGENTS_HUB/$category/$agent_name.md" ]]; then
                echo "$AGENTS_HUB/$category/$agent_name.md"
                return 0
            fi
        done
    fi
    
    # PRIORITY 2: Check in submodule (legacy support)
    if [[ -d "$SUBMODULE_DIR" ]]; then
        # Check in each category
        for category in business data-ai development infrastructure quality-testing security specialization; do
            if [ -f "$SUBMODULE_DIR/$category/$agent_name.md" ]; then
                echo "$SUBMODULE_DIR/$category/$agent_name.md"
                return 0
            fi
        done
        
        # Check in root
        if [ -f "$SUBMODULE_DIR/$agent_name.md" ]; then
            echo "$SUBMODULE_DIR/$agent_name.md"
            return 0
        fi
    fi
    
    # PRIORITY 3: Check in simple agents directory
    if [ -f "$SIMPLE_AGENTS_DIR/$agent_name.md" ]; then
        echo "$SIMPLE_AGENTS_DIR/$agent_name.md"
        return 0
    fi
    
    # PRIORITY 4: Check in archive agents directory (lowest priority)
    if [ -f "$ARCHIVE_AGENTS_DIR/$agent_name.md" ]; then
        echo "$ARCHIVE_AGENTS_DIR/$agent_name.md"
        return 0
    fi
    
    return 1
}

# Function to get simple agents by category
get_simple_agents_by_category() {
    local category="$1"
    local agents=()
    
    case "$category" in
        "read")
            agents=("config-reader" "log-reader" "readme-reader" "env-reader" "analyze-screenshot")
            ;;
        "write")
            agents=("gitignore-writer" "readme-writer" "env-writer" "changelog-writer")
            ;;
        "bash")
            agents=("test-runner" "build-runner" "git-executor" "dependency-installer")
            ;;
        "grep")
            agents=("error-finder" "todo-finder" "import-finder" "function-finder")
            ;;
        "edit")
            agents=("comment-remover" "whitespace-fixer" "import-sorter" "typo-fixer")
            ;;
        *)
            return 1
            ;;
    esac
    
    printf '%s\n' "${agents[@]}"
}

# Function to get all simple agents
get_all_simple_agents() {
    all_agents=()
    
    # Add all categories
    for category in read write bash grep edit; do
        while IFS= read -r agent; do
            all_agents+=("$agent")
        done < <(get_simple_agents_by_category "$category")
    done
    
    printf '%s\n' "${all_agents[@]}"
}

# Function to install simple agents by category
install_simple_agents_category() {
    local category="$1"
    local target_dir="$2"
    local category_display="$3"
    
    agents=()
    while IFS= read -r agent; do
        agents+=("$agent")
    done < <(get_simple_agents_by_category "$category")
    
    if [ ${#agents[@]} -eq 0 ]; then
        print_error "Unknown simple agent category: $category"
        return 1
    fi
    
    print_info "Installing $category_display agents..."
    
    count=0
    failed=0
    
    for agent_name in "${agents[@]}"; do
        set +e  # Temporarily disable exit on error for this loop iteration
        
        # Find agent file
        if agent_file=$(find_agent_file "$agent_name" 2>/dev/null) && [ -n "$agent_file" ]; then
            # Install agent
            install_agent "$agent_file" "$target_dir"
            install_result=$?
            if [ $install_result -eq 0 ]; then
                ((count++))
            else
                ((failed++))
            fi
        else
            print_error "Simple agent not found: $agent_name"
            ((failed++))
        fi
        
        set -e  # Re-enable exit on error
    done
    
    print_success "$category_display installation: $count agents installed"
    
    if [ $failed -gt 0 ]; then
        print_warning "$failed $category_display agents failed or skipped"
    fi
    
    return 0
}

# Function to install all simple agents
install_all_simple_agents() {
    local target_dir="$1"
    
    print_info "Installing all simple single-tool agents..."
    echo ""
    
    total_count=0
    total_failed=0
    
    # Install by category with visual organization
    categories=("read:Read Agents (Analyzers)" "write:Write Agents (Generators)" "bash:Bash Agents (Executors)" "grep:Grep Agents (Searchers)" "edit:Edit Agents (Modifiers)")
    
    for category_info in "${categories[@]}"; do
        IFS=':' read -r category display_name <<< "$category_info"
        
        echo -e "${BLUE}$display_name:${NC}"
        
        agents=()
        while IFS= read -r agent; do
            agents+=("$agent")
        done < <(get_simple_agents_by_category "$category")
        
        count=0
        failed=0
        
        for agent_name in "${agents[@]}"; do
            set +e  # Temporarily disable exit on error for this loop iteration
            
            if agent_file=$(find_agent_file "$agent_name" 2>/dev/null) && [ -n "$agent_file" ]; then
                # Get tool from agent for display
                tool=$(grep "^tools:" "$agent_file" | sed 's/tools: //' 2>/dev/null || echo "Unknown")
                
                install_agent "$agent_file" "$target_dir"
                install_result=$?
                if [ $install_result -eq 0 ]; then
                    echo -e "  ${GREEN}✓${NC} Installed $agent_name (Tool: $tool)"
                    ((count++))
                    ((total_count++))
                else
                    echo -e "  ${YELLOW}⏭️${NC} Skipped $agent_name (already exists or failed)"
                    ((failed++))
                    ((total_failed++))
                fi
            else
                print_error "  Simple agent not found: $agent_name"
                ((failed++))
                ((total_failed++))
            fi
            
            set -e  # Re-enable exit on error
        done
        
        echo ""
    done
    
    # Summary
    echo -e "${GREEN}═══════════════════════════════════════${NC}"
    echo -e "${GREEN}Simple Agents Installation Complete!${NC}"
    echo -e "${GREEN}═══════════════════════════════════════${NC}"
    echo ""
    echo "📊 Summary:"
    echo "  • Installed: $total_count agents"
    echo "  • Skipped/Failed: $total_failed agents"
    echo ""
    echo "🚀 These single-tool agents are optimized for:"
    echo "  • Ultra-fast loading (<100ms)"
    echo "  • Specific, focused tasks"
    echo "  • Minimal token usage"
    echo "  • Clear, predictable behavior"
    echo ""
    echo "💡 Usage examples:"
    echo -e "  ${YELLOW}@config-reader${NC} - Read and parse config files"
    echo -e "  ${YELLOW}@error-finder${NC} - Find all errors in codebase"
    echo -e "  ${YELLOW}@test-runner${NC} - Run test suite"
    echo -e "  ${YELLOW}@gitignore-writer${NC} - Generate .gitignore"
    echo -e "  ${YELLOW}@whitespace-fixer${NC} - Clean up formatting"
    echo ""
}

# Function to install a single agent
install_agent() {
    local agent_file="$1"
    local target_dir="$2"
    local agent_name="$(basename "$agent_file")"
    
    local target_file="$target_dir/$agent_name"
    
    if [ "$DRY_RUN" = true ]; then
        if [ -f "$target_file" ]; then
            print_info "[DRY-RUN] Would backup existing agent: $agent_name"
        fi
        print_info "[DRY-RUN] Would install agent: $agent_name"
        return 0
    fi
    
    # Backup existing agent if it exists
    if [ -f "$target_file" ] && [ "$FORCE" = false ]; then
        print_warning "Agent already exists: $agent_name"
        read -p "Overwrite? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Skipping $agent_name"
            return 1
        fi
    fi
    
    if [ -f "$target_file" ]; then
        local backup_file="${target_file}.backup.$(date +%Y%m%d_%H%M%S)"
        [ "$VERBOSE" = true ] && print_info "Backing up existing agent to: $backup_file"
        cp "$target_file" "$backup_file"
    fi
    
    # Copy agent file
    [ "$VERBOSE" = true ] && print_info "Installing agent: $agent_name"
    cp "$agent_file" "$target_file"
    
    print_success "Installed: $agent_name"
    return 0
}

# Function to update CLAUDE.md with agent instructions
update_claude_md() {
    local target_project="$1"
    local claude_file="$target_project/CLAUDE.md"
    local installed_agents=()
    
    # Collect list of installed agents
    if [ -d "$target_project/.claude/agents" ]; then
        for agent_file in "$target_project/.claude/agents"/*.md; do
            if [ -f "$agent_file" ]; then
                local agent_name=$(basename "$agent_file" .md)
                installed_agents+=("$agent_name")
            fi
        done
    fi
    
    if [ ${#installed_agents[@]} -eq 0 ]; then
        [ "$VERBOSE" = true ] && print_info "No agents installed, skipping CLAUDE.md update"
        return 0
    fi
    
    [ "$DRY_RUN" = true ] && print_info "[DRY-RUN] Would update CLAUDE.md with agent instructions"
    [ "$DRY_RUN" = true ] && return 0
    
    # Check if CLAUDE.md exists
    local update_type="Creating"
    if [ -f "$claude_file" ]; then
        update_type="Updating"
        # Check if agent section already exists
        if grep -q "## Installed Sub-Agents" "$claude_file" 2>/dev/null; then
            print_info "Agent section already exists in CLAUDE.md, updating..."
            # Remove old agent section
            sed -i '/## Installed Sub-Agents/,/^## /{ /^## Installed Sub-Agents/d; /^## /!d; }' "$claude_file" 2>/dev/null || \
            sed -i '' '/## Installed Sub-Agents/,/^## /{ /^## Installed Sub-Agents/d; /^## /!d; }' "$claude_file"
        fi
    fi
    
    print_info "$update_type CLAUDE.md with agent instructions..."
    
    # Prepare the agent documentation section
    local agent_docs="

## Installed Sub-Agents

This project has the following specialized AI sub-agents available:

### Available Agents
"
    
    # Add each agent with proper categorization
    for agent in "${installed_agents[@]}"; do
        # Try to determine category
        local category="general"
        for cat in business data-ai development infrastructure quality-testing security specialization; do
            if [ -f "$SUBMODULE_DIR/$cat/$agent.md" ]; then
                category="$cat"
                break
            fi
        done
        
        agent_docs+="
- **$agent** ($category): Specialized agent for domain-specific tasks"
    done
    
    agent_docs+="

### Usage Instructions

These agents can be invoked in three ways:

1. **Automatic Invocation**: Claude Code will automatically select the appropriate agent based on your task
2. **Explicit Invocation**: Use phrases like \"Use the $agent to...\" or \"Have $agent handle this\"
3. **Agent Organizer**: For complex multi-agent workflows, the agent-organizer can coordinate multiple specialists

### Examples

\`\`\`bash
# Direct invocation
\"Use the code-reviewer to analyze this pull request\"
\"Have the security-auditor scan for vulnerabilities\"

# Multi-agent coordination
\"Use backend-architect to design the API, then have security-auditor review it\"
\`\`\`

### Agent Categories

- **business**: Product management and business analysis
- **data-ai**: Data engineering, AI/ML, and database optimization
- **development**: Frontend, backend, and full-stack development
- **infrastructure**: Cloud, DevOps, and performance engineering
- **quality-testing**: Code review, QA, and testing automation
- **security**: Security auditing and vulnerability assessment
- **specialization**: API documentation and specialized expertise

### Best Practices

- Trust automatic delegation for optimal agent selection
- Provide rich context about your requirements
- Use explicit invocation when you need specific expertise
- For complex projects, consider using the agent-organizer for multi-agent coordination

---
*Agents installed via claude-code-sub-agents repository*
"
    
    # Append to CLAUDE.md
    echo "$agent_docs" >> "$claude_file"
    
    print_success "CLAUDE.md updated with agent instructions"
}

# Function to install all agents
install_all_agents() {
    local target_dir="$1"
    local count=0
    local skipped=0
    
    print_info "Installing all available agents..."
    
    # Install from each category
    for category in business data-ai development infrastructure quality-testing security specialization; do
        if [ -d "$SUBMODULE_DIR/$category" ]; then
            [ "$VERBOSE" = true ] && print_info "Processing category: $category"
            for agent_file in "$SUBMODULE_DIR/$category"/*.md; do
                if [ -f "$agent_file" ]; then
                    set +e  # Temporarily disable exit on error
                    install_agent "$agent_file" "$target_dir"
                    install_result=$?
                    if [ $install_result -eq 0 ]; then
                        ((count++))
                    else
                        ((skipped++))
                    fi
                    set -e  # Re-enable exit on error
                fi
            done
        fi
    done
    
    # Install root-level agents
    for agent_file in "$SUBMODULE_DIR"/*.md; do
        if [ -f "$agent_file" ] && [ "$(basename "$agent_file")" != "README.md" ] && [ "$(basename "$agent_file")" != "CLAUDE.md" ]; then
            set +e  # Temporarily disable exit on error
            install_agent "$agent_file" "$target_dir"
            install_result=$?
            if [ $install_result -eq 0 ]; then
                ((count++))
            else
                ((skipped++))
            fi
            set -e  # Re-enable exit on error
        fi
    done
    
    print_success "Installation complete: $count agents installed, $skipped skipped"
}

# Parse command line arguments
POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            show_help
            exit 0
            ;;
        --symlink)
            SYMLINK_MODE=true
            shift
            ;;
        --copy)
            COPY_MODE=true
            shift
            ;;
        --global)
            GLOBAL_INSTALL=true
            shift
            ;;
        --project)
            if [ -z "$2" ]; then
                print_error "--project requires a path argument"
                exit 1
            fi
            PROJECT_PATH="$2"
            shift 2
            ;;
        --health)
            HEALTH_CHECK=true
            shift
            ;;
        --repair)
            REPAIR=true
            shift
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --all)
            INSTALL_ALL=true
            shift
            ;;
        --list)
            list_agents
            exit 0
            ;;
        --list-installed)
            LIST_INSTALLED=true
            shift
            ;;
        --profile)
            if [ -z "$2" ]; then
                print_error "--profile requires a profile name"
                exit 1
            fi
            PROFILE_NAME="$2"
            shift 2
            ;;
        --list-profiles)
            LIST_PROFILES=true
            shift
            ;;
        --show-profile)
            if [ -z "$2" ]; then
                print_error "--show-profile requires a profile name"
                exit 1
            fi
            SHOW_PROFILE="$2"
            shift 2
            ;;
        --simple)
            INSTALL_SIMPLE=true
            shift
            ;;
        --simple-read)
            SIMPLE_READ=true
            shift
            ;;
        --simple-write)
            SIMPLE_WRITE=true
            shift
            ;;
        --simple-bash)
            SIMPLE_BASH=true
            shift
            ;;
        --simple-grep)
            SIMPLE_GREP=true
            shift
            ;;
        --simple-edit)
            SIMPLE_EDIT=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --skip-speak-check)
            SKIP_SPEAK_CHECK=true
            shift
            ;;
        -*)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done

# Restore positional parameters
set -- "${POSITIONAL_ARGS[@]}"

# Handle profile-only commands first
if [ "$LIST_PROFILES" = true ]; then
    list_profiles
    exit 0
fi

if [ ! -z "$SHOW_PROFILE" ]; then
    show_profile "$SHOW_PROFILE"
    exit 0
fi

if [ "$LIST_INSTALLED" = true ]; then
    # For --list-installed, we need a target project path
    if [ $# -eq 0 ]; then
        print_error "No target project path specified for --list-installed"
        print_info "Usage: install-agents --list-installed <project-path>"
        exit 1
    fi
    list_installed_agents "$1"
    exit 0
fi

# Handle mode selection with new defaults (symlink is now default)
if [[ "$COPY_MODE" == "true" && "$SYMLINK_MODE" == "true" ]]; then
    # Both flags specified explicitly - error
    print_error "Cannot use both --symlink and --copy modes simultaneously"
    exit 1
elif [[ "$COPY_MODE" == "true" ]]; then
    # Copy mode explicitly requested
    SYMLINK_MODE=false
elif [[ "$SYMLINK_MODE" != "true" && "$COPY_MODE" != "true" ]]; then
    # No mode specified - use new default (symlink)
    SYMLINK_MODE=true
fi

# Validate global install requirements (after mode selection)
if [[ "$GLOBAL_INSTALL" == "true" && "$SYMLINK_MODE" != "true" ]]; then
    print_error "--global requires --symlink mode"
    print_info "Use: install-agents --symlink --global --profile <name>"
    exit 1
fi

# Validate hub exists for symlink mode
if [[ "$SYMLINK_MODE" == "true" ]]; then
    if ! check_hub; then
        print_info "Agents hub not available. Falling back to copy mode..."
        SYMLINK_MODE=false
        COPY_MODE=true
    else
        print_info "Using SYMLINK MODE with agents hub"
    fi
else
    print_info "Using COPY MODE (traditional file copying)"
fi

# Handle symlink-specific operations
if [[ "$SYMLINK_MODE" == "true" ]]; then
    # Determine target directory for symlink mode
    if [[ "$GLOBAL_INSTALL" == "true" ]]; then
        TARGET_AGENTS_DIR="$HOME/.claude/agents"
        print_info "Installing agents globally to: $TARGET_AGENTS_DIR"
    elif [[ -n "$PROJECT_PATH" ]]; then
        TARGET_AGENTS_DIR="$PROJECT_PATH/.claude/agents"
        print_info "Installing agents to project: $TARGET_AGENTS_DIR"
    else
        # NEW: Use TARGET_PROJECT as fallback (supports current directory default)
        TARGET_AGENTS_DIR="$TARGET_PROJECT/.claude/agents"
        print_info "Installing agents to project: $TARGET_AGENTS_DIR"
    fi

    # Handle health check
    if [[ "$HEALTH_CHECK" == "true" ]]; then
        health_check "$TARGET_AGENTS_DIR"
        exit 0
    fi

    # Handle repair
    if [[ "$REPAIR" == "true" ]]; then
        repair_links "$TARGET_AGENTS_DIR"
        exit 0
    fi

    # For symlink mode, we need a profile, --all, simple agents, or individual agents
    if [[ -z "$PROFILE_NAME" && "$INSTALL_ALL" != "true" && "$INSTALL_SIMPLE" != "true" && $# -eq 0 ]]; then
        print_error "Please specify what to install:"
        print_info "  --profile <name>     Install agents from a profile"
        print_info "  --all               Install all available agents"
        print_info "  --simple            Install simple single-tool agents"
        print_info "  agent-name1 agent-name2  Install specific agents"
        print_info "Use --list-profiles to see available profiles"
        exit 1
    fi
    
    # Create target directory for symlinks
    if [[ ! -d "$TARGET_AGENTS_DIR" ]]; then
        print_info "Creating directory: $TARGET_AGENTS_DIR"
        if [[ "$DRY_RUN" != "true" ]]; then
            mkdir -p "$TARGET_AGENTS_DIR"
        fi
    fi

    # Handle symlink installation
    if [[ "$INSTALL_ALL" == "true" ]]; then
        PROFILE_NAME="all"
    fi
    
    if [[ -n "$PROFILE_NAME" ]]; then
        # Install via symlinks using profile
        agents=($(get_profile_agents_symlink "$PROFILE_NAME"))
        if [[ ${#agents[@]} -eq 0 ]]; then
            print_warning "No agents found for profile: $PROFILE_NAME"
            exit 1
        fi

        print_info "Installing ${#agents[@]} agents from profile '$PROFILE_NAME' using symlinks"
        
        success_count=0
        skip_count=0
        
        for agent_file in "${agents[@]}"; do
            set +e  # Temporarily disable exit on error for this loop iteration
            
            agent_name=$(get_agent_display_name "$agent_file")
            target_file="$TARGET_AGENTS_DIR/$agent_name.md"
            
            if create_symlink "$agent_file" "$target_file"; then
                ((success_count++))
            else
                ((skip_count++))
            fi
            
            set -e  # Re-enable exit on error
        done
        
        echo
        print_success "Symlink installation complete: $success_count installed, $skip_count skipped"
        print_info "Next steps:"
        print_info "• Test agents with Claude Code"
        print_info "• Run health check: install-agents --symlink --health"
        print_info "• Update agents by modifying files in: $AGENTS_HUB"
        exit 0
    elif [[ $# -gt 0 ]]; then
        # Install specific agents via symlinks
        print_info "Installing $# specific agents using symlinks"
        
        success_count=0
        skip_count=0
        
        for agent_name in "$@"; do
            set +e  # Temporarily disable exit on error for this loop iteration
            
            # Use enhanced find_agent_file function to get enhanced versions
            if agent_file=$(find_agent_file "$agent_name" 2>/dev/null) && [ -n "$agent_file" ]; then
                target_file="$TARGET_AGENTS_DIR/$agent_name.md"
                if create_symlink "$agent_file" "$target_file"; then
                    ((success_count++))
                else
                    ((skip_count++))
                fi
            else
                print_error "Agent not found: $agent_name"
                ((skip_count++))
            fi
            
            set -e  # Re-enable exit on error
        done
        
        echo
        print_success "Symlink installation complete: $success_count installed, $skip_count skipped"
        print_info "Next steps:"
        print_info "• Test agents with Claude Code"
        print_info "• Run health check: install-agents --symlink --health"
        print_info "• Update agents by modifying files in: $AGENTS_HUB"
        exit 0
    fi
fi

# Check if submodule is initialized (for copy mode only)
if [[ "$COPY_MODE" == "true" ]] && [ ! -d "$SUBMODULE_DIR" ]; then
    print_error "Submodule not found at: $SUBMODULE_DIR"
    print_info "Initializing submodule..."
    git submodule update --init --recursive
    if [ ! -d "$SUBMODULE_DIR" ]; then
        print_error "Failed to initialize submodule"
        exit 1
    fi
fi

# Handle arguments with new defaults (current directory if none specified)
# Check if --project flag was used first
if [[ -n "$PROJECT_PATH" ]]; then
    TARGET_PROJECT="$PROJECT_PATH"
elif [ $# -eq 0 ]; then
    # No arguments provided - use current directory as default
    TARGET_PROJECT="."
else
    TARGET_PROJECT="$1"
    shift
fi

# Convert to absolute path
TARGET_PROJECT="$(cd "$TARGET_PROJECT" 2>/dev/null && pwd)" || {
    print_error "Target project path does not exist: $TARGET_PROJECT"
    exit 1
}

# Create .claude/agents directory if it doesn't exist
TARGET_AGENTS_DIR="$TARGET_PROJECT/.claude/agents"
if [ ! -d "$TARGET_AGENTS_DIR" ]; then
    print_info "Creating agents directory: $TARGET_AGENTS_DIR"
    mkdir -p "$TARGET_AGENTS_DIR"
fi

# Check speak command
check_speak_command || true

# Main installation logic
print_info "Installing agents to: $TARGET_AGENTS_DIR"
[ "$DRY_RUN" = true ] && print_warning "DRY-RUN MODE: No changes will be made"

# Check for simple agents installation
if [ "$INSTALL_SIMPLE" = true ]; then
    install_all_simple_agents "$TARGET_AGENTS_DIR"
elif [ "$SIMPLE_READ" = true ] || [ "$SIMPLE_WRITE" = true ] || [ "$SIMPLE_BASH" = true ] || [ "$SIMPLE_GREP" = true ] || [ "$SIMPLE_EDIT" = true ]; then
    # Install specific simple agent categories
    any_installed=false
    
    if [ "$SIMPLE_READ" = true ]; then
        install_simple_agents_category "read" "$TARGET_AGENTS_DIR" "Read Agents (Analyzers)"
        any_installed=true
    fi
    
    if [ "$SIMPLE_WRITE" = true ]; then
        install_simple_agents_category "write" "$TARGET_AGENTS_DIR" "Write Agents (Generators)"
        any_installed=true
    fi
    
    if [ "$SIMPLE_BASH" = true ]; then
        install_simple_agents_category "bash" "$TARGET_AGENTS_DIR" "Bash Agents (Executors)"
        any_installed=true
    fi
    
    if [ "$SIMPLE_GREP" = true ]; then
        install_simple_agents_category "grep" "$TARGET_AGENTS_DIR" "Grep Agents (Searchers)"
        any_installed=true
    fi
    
    if [ "$SIMPLE_EDIT" = true ]; then
        install_simple_agents_category "edit" "$TARGET_AGENTS_DIR" "Edit Agents (Modifiers)"
        any_installed=true
    fi
    
    if [ "$any_installed" = true ]; then
        echo ""
        print_success "Simple agent categories installation complete!"
        echo ""
        echo "💡 Usage examples:"
        echo -e "  ${YELLOW}@config-reader${NC} - Read and parse config files"
        echo -e "  ${YELLOW}@error-finder${NC} - Find all errors in codebase"
        echo -e "  ${YELLOW}@test-runner${NC} - Run test suite"
        echo ""
    fi
elif [ "$INSTALL_ALL" = true ]; then
    install_all_agents "$TARGET_AGENTS_DIR"
elif [ ! -z "$PROFILE_NAME" ]; then
    # Install from profile
    install_profile "$PROFILE_NAME" "$TARGET_AGENTS_DIR"
elif [ $# -eq 0 ]; then
    print_error "No agents or installation option specified."
    echo ""
    echo -e "${YELLOW}Available options:${NC}"
    echo "  --all                Install all available agents"
    echo "  --simple             Install all simple single-tool agents"
    echo "  --simple-read        Install Read-based agents only"
    echo "  --simple-write       Install Write-based agents only"
    echo "  --simple-bash        Install Bash-based agents only"
    echo "  --simple-grep        Install Grep-based agents only"
    echo "  --simple-edit        Install Edit-based agents only"
    echo "  --profile <name>     Install agents from a profile"
    echo "  [agent-names...]     Install specific named agents"
    echo ""
    print_info "Use --list to see available agents or --list-profiles to see available profiles"
    exit 1
else
    # Install specific agents
    count=0
    failed=0
    
    for agent_name in "$@"; do
        set +e  # Temporarily disable exit on error for this loop iteration
        
        if agent_file=$(find_agent_file "$agent_name" 2>/dev/null) && [ -n "$agent_file" ]; then
            install_agent "$agent_file" "$TARGET_AGENTS_DIR"
            install_result=$?
            if [ $install_result -eq 0 ]; then
                ((count++))
            else
                ((failed++))
            fi
        else
            print_error "Agent not found: $agent_name"
            ((failed++))
        fi
        
        set -e  # Re-enable exit on error
    done
    
    if [ $count -gt 0 ]; then
        print_success "Installation complete: $count agents installed"
    fi
    
    if [ $failed -gt 0 ]; then
        print_warning "$failed agents failed or skipped"
    fi
fi

# Update CLAUDE.md with agent instructions
if [ "$DRY_RUN" = false ]; then
    update_claude_md "$TARGET_PROJECT"
fi

# Final message
if [ "$DRY_RUN" = false ]; then
    print_success "✨ Agent installation complete!"
    print_info "Agents are now available in: $TARGET_AGENTS_DIR"
    print_info "Use them in Claude Code with @agent-name or explicit invocation"
fi
