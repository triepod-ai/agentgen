# Knowledge Refresh Pipeline - BRAINPOD Infrastructure
# Docker Compose configuration for Chroma + Qdrant + Redis orchestration

version: '3.8'

services:
  # Redis - Performance caching and session management
  redis:
    image: redis:7-alpine
    container_name: knowledge-refresh-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - knowledge-network
    restart: unless-stopped

  # Qdrant - Vector database for knowledge storage
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: knowledge-refresh-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - knowledge-network
    restart: unless-stopped

  # Chroma - Workflow coordination and process tracking
  chroma:
    image: ghcr.io/chroma-core/chroma:0.4.18
    container_name: knowledge-refresh-chroma
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_DB_IMPL=duckdb+parquet
      - CHROMA_API_IMPL=chromadb.api.fastapi.FastAPI
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - knowledge-network
    restart: unless-stopped

  # Knowledge Refresh Orchestrator
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: knowledge-refresh-orchestrator
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      chroma:
        condition: service_healthy
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - orchestrator_data:/app/data
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
      - LOG_LEVEL=INFO
      - WEBHOOK_URL=${WEBHOOK_URL:-}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
    networks:
      - knowledge-network
    restart: unless-stopped
    command: ["python", "knowledge_refresh_orchestrator.py", "--daemon"]

  # Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: knowledge-refresh-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - knowledge-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus for metrics collection (Optional)
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: knowledge-refresh-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - knowledge-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  chroma_data:
    driver: local
  orchestrator_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  knowledge-network:
    driver: bridge
    name: knowledge-refresh-network