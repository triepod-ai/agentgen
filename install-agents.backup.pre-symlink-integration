#!/bin/bash

# Claude Code Sub-Agents Installer
# Install subagents from the claude-code-sub-agents repository to a target project

set -e

# Colors for output - with proper terminal detection
if [[ -t 1 ]] || [[ "${FORCE_COLOR:-}" == "1" ]] || [[ "${CLICOLOR_FORCE:-}" == "1" ]]; then
    # Terminal supports colors or color is forced
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
else
    # No color support or NO_COLOR is set
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

# Disable colors if NO_COLOR is set (https://no-color.org)
if [[ "${NO_COLOR:-}" != "" ]]; then
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

# Default values
FORCE=false
DRY_RUN=false
VERBOSE=false
INSTALL_ALL=false
SKIP_SPEAK_CHECK=false
PROFILE_NAME=""
SHOW_PROFILE=""
LIST_PROFILES=false
INSTALL_SIMPLE=false
SIMPLE_READ=false
SIMPLE_WRITE=false
SIMPLE_BASH=false
SIMPLE_GREP=false
SIMPLE_EDIT=false

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SUBMODULE_DIR="$SCRIPT_DIR/submodules/claude-code-sub-agents"
PROFILES_DIR="$SCRIPT_DIR/profiles"
SIMPLE_AGENTS_DIR="$SCRIPT_DIR/simple-agents"
ARCHIVE_AGENTS_DIR="$SCRIPT_DIR/archive/agents"

# Function to display help
show_help() {
    cat << EOF
Claude Code Sub-Agents Installer

USAGE:
    install-agents [OPTIONS] <target-project-path> [agent-names...]

OPTIONS:
    --help              Show this help message
    --force             Force installation, overwrite existing agents
    --all               Install all available agents
    --list              List all available agents
    --profile <name>    Install agents from a profile
    --list-profiles     List all available profiles
    --show-profile <name> Show details of a specific profile
    --dry-run           Show what would be installed without making changes
    --verbose           Show detailed installation progress
    --skip-speak-check  Skip speak command validation

SIMPLE AGENTS OPTIONS:
    --simple            Install all 21 simple single-tool agents
    --simple-read       Install Read-based agents (config, log, readme, env, screenshot)
    --simple-write      Install Write-based agents (gitignore, readme, env, changelog)
    --simple-bash       Install Bash-based agents (test, build, git, dependencies)
    --simple-grep       Install Grep-based agents (error, todo, import, function finders)
    --simple-edit       Install Edit-based agents (comment remover, whitespace, sorter, typo fixer)

ARGUMENTS:
    target-project-path Path to the project where agents will be installed
    agent-names         Specific agents to install (optional if --all is used)

EXAMPLES:
    # Install specific agents
    install-agents /path/to/my-project code-reviewer test-automator

    # Install all agents
    install-agents --all /path/to/my-project

    # Install a profile (group of agents)
    install-agents --profile development-team /path/to/my-project

    # Install all simple agents
    install-agents --simple /path/to/my-project

    # Install specific simple agent categories
    install-agents --simple-read --simple-bash /path/to/my-project

    # List available agents and profiles
    install-agents --list
    install-agents --list-profiles

    # Show profile details
    install-agents --show-profile development-team

    # Dry run to see what would be installed
    install-agents --dry-run --profile development-team /path/to/my-project

AGENT CATEGORIES:
    - business:          Product management and business analysis
    - data-ai:          Data engineering, AI/ML, and database optimization
    - development:      Frontend, backend, and full-stack development
    - infrastructure:   Cloud, DevOps, and performance engineering
    - quality-testing:  Code review, QA, and testing automation
    - security:         Security auditing and vulnerability assessment
    - specialization:   API documentation and specialized expertise

SIMPLE AGENT CATEGORIES (Ultra-fast, single-tool focused):
    - Read Agents:      Config, log, README, env readers + screenshot analyzer
    - Write Agents:     .gitignore, README, env, changelog generators
    - Bash Agents:      Test runner, build runner, git executor, dependency installer
    - Grep Agents:      Error, TODO, import, function finders
    - Edit Agents:      Comment remover, whitespace fixer, import sorter, typo fixer

FEATURES:
    ✅ Selective agent installation
    ✅ Category-based organization
    ✅ Simple single-tool agents for ultra-fast loading
    ✅ Profile-based group installation
    ✅ Speak command integration support
    ✅ Conflict detection and resolution
    ✅ Backup of existing agents
    ✅ Dry-run mode for safe testing

EOF
}

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to list available profiles
list_profiles() {
    print_info "Available agent profiles:"
    echo ""
    
    if [ ! -d "$PROFILES_DIR" ]; then
        print_warning "No profiles directory found"
        return 0
    fi
    
    profile_count=0
    for profile_file in "$PROFILES_DIR"/*.profile; do
        if [ -f "$profile_file" ]; then
            set +e  # Temporarily disable exit on error
            profile_name=$(basename "$profile_file" .profile)
            description=$(grep "^description:" "$profile_file" 2>/dev/null | sed 's/^description: *//' || echo "No description")
            echo -e "${GREEN}$profile_name:${NC} $description"
            ((profile_count++))
            set -e  # Re-enable exit on error
        fi
    done
    
    if [ $profile_count -eq 0 ]; then
        print_warning "No profiles found in $PROFILES_DIR"
    fi
}

# Function to show profile details
show_profile() {
    local profile_name="$1"
    local profile_file="$PROFILES_DIR/$profile_name.profile"
    
    if [ ! -f "$profile_file" ]; then
        print_error "Profile not found: $profile_name"
        return 1
    fi
    
    print_info "Profile: $profile_name"
    echo ""
    
    # Show description
    local description=$(grep "^description:" "$profile_file" 2>/dev/null | sed 's/^description: *//' || echo "No description")
    echo -e "${YELLOW}Description:${NC} $description"
    echo ""
    
    # Show agents
    echo -e "${YELLOW}Agents to be installed:${NC}"
    local agent_count=0
    while IFS= read -r line; do
        # Skip comments and empty lines
        if [[ "$line" =~ ^[[:space:]]*# ]] || [[ "$line" =~ ^[[:space:]]*$ ]] || [[ "$line" =~ ^name: ]] || [[ "$line" =~ ^description: ]] || [[ "$line" =~ ^agents: ]]; then
            continue
        fi
        
        # Extract agent name
        if [[ "$line" =~ ^[[:space:]]*-[[:space:]]*(.+)$ ]]; then
            local agent_name="${BASH_REMATCH[1]}"
            echo "  - $agent_name"
            ((agent_count++))
        elif [[ ! "$line" =~ ^[[:space:]]*# ]] && [[ ! "$line" =~ ^[[:space:]]*$ ]]; then
            # Handle simple list format (one agent per line)
            local agent_name=$(echo "$line" | xargs)  # trim whitespace
            if [ -n "$agent_name" ]; then
                echo "  - $agent_name"
                ((agent_count++))
            fi
        fi
    done < "$profile_file"
    
    echo ""
    print_info "Total agents: $agent_count"
}

# Function to parse profile and get agent list
parse_profile() {
    local profile_name="$1"
    local profile_file="$PROFILES_DIR/$profile_name.profile"
    
    if [ ! -f "$profile_file" ]; then
        print_error "Profile not found: $profile_name"
        return 1
    fi
    
    local agents=()
    while IFS= read -r line; do
        # Skip comments and empty lines
        if [[ "$line" =~ ^[[:space:]]*# ]] || [[ "$line" =~ ^[[:space:]]*$ ]] || [[ "$line" =~ ^name: ]] || [[ "$line" =~ ^description: ]] || [[ "$line" =~ ^agents: ]]; then
            continue
        fi
        
        # Extract agent name
        if [[ "$line" =~ ^[[:space:]]*-[[:space:]]*(.+)$ ]]; then
            local agent_name="${BASH_REMATCH[1]}"
            agents+=("$agent_name")
        elif [[ ! "$line" =~ ^[[:space:]]*# ]] && [[ ! "$line" =~ ^[[:space:]]*$ ]]; then
            # Handle simple list format (one agent per line)
            local agent_name=$(echo "$line" | xargs)  # trim whitespace
            if [ -n "$agent_name" ]; then
                agents+=("$agent_name")
            fi
        fi
    done < "$profile_file"
    
    # Return agents as space-separated string
    printf '%s\n' "${agents[@]}"
}

# Function to install agents from profile
install_profile() {
    local profile_name="$1"
    local target_dir="$2"
    
    print_info "Installing profile: $profile_name"
    
    # Parse profile to get agent list
    local agents
    if ! agents=($(parse_profile "$profile_name")); then
        return 1
    fi
    
    if [ ${#agents[@]} -eq 0 ]; then
        print_warning "No agents found in profile: $profile_name"
        return 1
    fi
    
    print_info "Profile contains ${#agents[@]} agents"
    [ "$VERBOSE" = true ] && show_profile "$profile_name"
    
    local count=0
    local failed=0
    
    # Install each agent in the profile
    for agent_name in "${agents[@]}"; do
        set +e  # Temporarily disable exit on error for this loop iteration
        
        if agent_file=$(find_agent_file "$agent_name" 2>/dev/null) && [ -n "$agent_file" ]; then
            install_agent "$agent_file" "$target_dir"
            install_result=$?
            if [ $install_result -eq 0 ]; then
                ((count++))
            else
                ((failed++))
            fi
        else
            print_error "Agent not found: $agent_name (from profile: $profile_name)"
            ((failed++))
        fi
        
        set -e  # Re-enable exit on error
    done
    
    if [ $count -gt 0 ]; then
        print_success "Profile installation complete: $count agents installed"
    fi
    
    if [ $failed -gt 0 ]; then
        print_warning "$failed agents failed or skipped"
    fi
    
    return 0
}

# Function to list available agents
list_agents() {
    print_info "Available agents in claude-code-sub-agents repository:"
    echo ""
    
    # Check if submodule exists
    if [ ! -d "$SUBMODULE_DIR" ]; then
        print_error "Submodule not found. Please run: git submodule update --init --recursive"
        exit 1
    fi
    
    # List by category
    for category in business data-ai development infrastructure quality-testing security specialization; do
        if [ -d "$SUBMODULE_DIR/$category" ]; then
            echo -e "${GREEN}$category:${NC}"
            for agent in "$SUBMODULE_DIR/$category"/*.md; do
                if [ -f "$agent" ]; then
                    basename "$agent" .md | sed 's/^/  - /'
                fi
            done
            echo ""
        fi
    done
    
    # List root-level agents
    echo -e "${GREEN}general:${NC}"
    for agent in "$SUBMODULE_DIR"/*.md; do
        if [ -f "$agent" ] && [ "$(basename "$agent")" != "README.md" ] && [ "$(basename "$agent")" != "CLAUDE.md" ]; then
            basename "$agent" .md | sed 's/^/  - /'
        fi
    done
    
    # List simple agents
    echo ""
    print_info "Available simple single-tool agents:"
    echo ""
    if [ -d "$SIMPLE_AGENTS_DIR" ]; then
        local categories=("read:Read Agents (Analyzers)" "write:Write Agents (Generators)" "bash:Bash Agents (Executors)" "grep:Grep Agents (Searchers)" "edit:Edit Agents (Modifiers)")
        
        for category_info in "${categories[@]}"; do
            IFS=':' read -r category display_name <<< "$category_info"
            echo -e "${GREEN}$display_name:${NC}"
            
            agents=()
            while IFS= read -r agent; do
                agents+=("$agent")
            done < <(get_simple_agents_by_category "$category")
            for agent in "${agents[@]}"; do
                echo "  - $agent"
            done
            echo ""
        done
    fi
    
    # Also show available profiles
    echo ""
    list_profiles
}

# Function to check if speak command is available
check_speak_command() {
    if [ "$SKIP_SPEAK_CHECK" = true ]; then
        return 0
    fi
    
    if command -v speak &> /dev/null; then
        print_success "Speak command found and available"
        return 0
    else
        print_warning "Speak command not found. TTS notifications will not be available."
        print_info "Install speak-app from: /home/bryan/bin/speak-app/"
        return 1
    fi
}

# Function to find agent file
find_agent_file() {
    local agent_name="$1"
    
    # Check in each category
    for category in business data-ai development infrastructure quality-testing security specialization; do
        if [ -f "$SUBMODULE_DIR/$category/$agent_name.md" ]; then
            echo "$SUBMODULE_DIR/$category/$agent_name.md"
            return 0
        fi
    done
    
    # Check in root
    if [ -f "$SUBMODULE_DIR/$agent_name.md" ]; then
        echo "$SUBMODULE_DIR/$agent_name.md"
        return 0
    fi
    
    # Check in simple agents directory
    if [ -f "$SIMPLE_AGENTS_DIR/$agent_name.md" ]; then
        echo "$SIMPLE_AGENTS_DIR/$agent_name.md"
        return 0
    fi
    
    # Check in archive agents directory
    if [ -f "$ARCHIVE_AGENTS_DIR/$agent_name.md" ]; then
        echo "$ARCHIVE_AGENTS_DIR/$agent_name.md"
        return 0
    fi
    
    return 1
}

# Function to get simple agents by category
get_simple_agents_by_category() {
    local category="$1"
    local agents=()
    
    case "$category" in
        "read")
            agents=("config-reader" "log-reader" "readme-reader" "env-reader" "analyze-screenshot")
            ;;
        "write")
            agents=("gitignore-writer" "readme-writer" "env-writer" "changelog-writer")
            ;;
        "bash")
            agents=("test-runner" "build-runner" "git-executor" "dependency-installer")
            ;;
        "grep")
            agents=("error-finder" "todo-finder" "import-finder" "function-finder")
            ;;
        "edit")
            agents=("comment-remover" "whitespace-fixer" "import-sorter" "typo-fixer")
            ;;
        *)
            return 1
            ;;
    esac
    
    printf '%s\n' "${agents[@]}"
}

# Function to get all simple agents
get_all_simple_agents() {
    all_agents=()
    
    # Add all categories
    for category in read write bash grep edit; do
        while IFS= read -r agent; do
            all_agents+=("$agent")
        done < <(get_simple_agents_by_category "$category")
    done
    
    printf '%s\n' "${all_agents[@]}"
}

# Function to install simple agents by category
install_simple_agents_category() {
    local category="$1"
    local target_dir="$2"
    local category_display="$3"
    
    agents=()
    while IFS= read -r agent; do
        agents+=("$agent")
    done < <(get_simple_agents_by_category "$category")
    
    if [ ${#agents[@]} -eq 0 ]; then
        print_error "Unknown simple agent category: $category"
        return 1
    fi
    
    print_info "Installing $category_display agents..."
    
    count=0
    failed=0
    
    for agent_name in "${agents[@]}"; do
        set +e  # Temporarily disable exit on error for this loop iteration
        
        # Find agent file
        if agent_file=$(find_agent_file "$agent_name" 2>/dev/null) && [ -n "$agent_file" ]; then
            # Install agent
            install_agent "$agent_file" "$target_dir"
            install_result=$?
            if [ $install_result -eq 0 ]; then
                ((count++))
            else
                ((failed++))
            fi
        else
            print_error "Simple agent not found: $agent_name"
            ((failed++))
        fi
        
        set -e  # Re-enable exit on error
    done
    
    print_success "$category_display installation: $count agents installed"
    
    if [ $failed -gt 0 ]; then
        print_warning "$failed $category_display agents failed or skipped"
    fi
    
    return 0
}

# Function to install all simple agents
install_all_simple_agents() {
    local target_dir="$1"
    
    print_info "Installing all simple single-tool agents..."
    echo ""
    
    total_count=0
    total_failed=0
    
    # Install by category with visual organization
    categories=("read:Read Agents (Analyzers)" "write:Write Agents (Generators)" "bash:Bash Agents (Executors)" "grep:Grep Agents (Searchers)" "edit:Edit Agents (Modifiers)")
    
    for category_info in "${categories[@]}"; do
        IFS=':' read -r category display_name <<< "$category_info"
        
        echo -e "${BLUE}$display_name:${NC}"
        
        agents=()
        while IFS= read -r agent; do
            agents+=("$agent")
        done < <(get_simple_agents_by_category "$category")
        
        count=0
        failed=0
        
        for agent_name in "${agents[@]}"; do
            set +e  # Temporarily disable exit on error for this loop iteration
            
            if agent_file=$(find_agent_file "$agent_name" 2>/dev/null) && [ -n "$agent_file" ]; then
                # Get tool from agent for display
                tool=$(grep "^tools:" "$agent_file" | sed 's/tools: //' 2>/dev/null || echo "Unknown")
                
                install_agent "$agent_file" "$target_dir"
                install_result=$?
                if [ $install_result -eq 0 ]; then
                    echo -e "  ${GREEN}✓${NC} Installed $agent_name (Tool: $tool)"
                    ((count++))
                    ((total_count++))
                else
                    echo -e "  ${YELLOW}⏭️${NC} Skipped $agent_name (already exists or failed)"
                    ((failed++))
                    ((total_failed++))
                fi
            else
                print_error "  Simple agent not found: $agent_name"
                ((failed++))
                ((total_failed++))
            fi
            
            set -e  # Re-enable exit on error
        done
        
        echo ""
    done
    
    # Summary
    echo -e "${GREEN}═══════════════════════════════════════${NC}"
    echo -e "${GREEN}Simple Agents Installation Complete!${NC}"
    echo -e "${GREEN}═══════════════════════════════════════${NC}"
    echo ""
    echo "📊 Summary:"
    echo "  • Installed: $total_count agents"
    echo "  • Skipped/Failed: $total_failed agents"
    echo ""
    echo "🚀 These single-tool agents are optimized for:"
    echo "  • Ultra-fast loading (<100ms)"
    echo "  • Specific, focused tasks"
    echo "  • Minimal token usage"
    echo "  • Clear, predictable behavior"
    echo ""
    echo "💡 Usage examples:"
    echo -e "  ${YELLOW}@config-reader${NC} - Read and parse config files"
    echo -e "  ${YELLOW}@error-finder${NC} - Find all errors in codebase"
    echo -e "  ${YELLOW}@test-runner${NC} - Run test suite"
    echo -e "  ${YELLOW}@gitignore-writer${NC} - Generate .gitignore"
    echo -e "  ${YELLOW}@whitespace-fixer${NC} - Clean up formatting"
    echo ""
}

# Function to install a single agent
install_agent() {
    local agent_file="$1"
    local target_dir="$2"
    local agent_name="$(basename "$agent_file")"
    
    local target_file="$target_dir/$agent_name"
    
    if [ "$DRY_RUN" = true ]; then
        if [ -f "$target_file" ]; then
            print_info "[DRY-RUN] Would backup existing agent: $agent_name"
        fi
        print_info "[DRY-RUN] Would install agent: $agent_name"
        return 0
    fi
    
    # Backup existing agent if it exists
    if [ -f "$target_file" ] && [ "$FORCE" = false ]; then
        print_warning "Agent already exists: $agent_name"
        read -p "Overwrite? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Skipping $agent_name"
            return 1
        fi
    fi
    
    if [ -f "$target_file" ]; then
        local backup_file="${target_file}.backup.$(date +%Y%m%d_%H%M%S)"
        [ "$VERBOSE" = true ] && print_info "Backing up existing agent to: $backup_file"
        cp "$target_file" "$backup_file"
    fi
    
    # Copy agent file
    [ "$VERBOSE" = true ] && print_info "Installing agent: $agent_name"
    cp "$agent_file" "$target_file"
    
    print_success "Installed: $agent_name"
    return 0
}

# Function to update CLAUDE.md with agent instructions
update_claude_md() {
    local target_project="$1"
    local claude_file="$target_project/CLAUDE.md"
    local installed_agents=()
    
    # Collect list of installed agents
    if [ -d "$target_project/.claude/agents" ]; then
        for agent_file in "$target_project/.claude/agents"/*.md; do
            if [ -f "$agent_file" ]; then
                local agent_name=$(basename "$agent_file" .md)
                installed_agents+=("$agent_name")
            fi
        done
    fi
    
    if [ ${#installed_agents[@]} -eq 0 ]; then
        [ "$VERBOSE" = true ] && print_info "No agents installed, skipping CLAUDE.md update"
        return 0
    fi
    
    [ "$DRY_RUN" = true ] && print_info "[DRY-RUN] Would update CLAUDE.md with agent instructions"
    [ "$DRY_RUN" = true ] && return 0
    
    # Check if CLAUDE.md exists
    local update_type="Creating"
    if [ -f "$claude_file" ]; then
        update_type="Updating"
        # Check if agent section already exists
        if grep -q "## Installed Sub-Agents" "$claude_file" 2>/dev/null; then
            print_info "Agent section already exists in CLAUDE.md, updating..."
            # Remove old agent section
            sed -i '/## Installed Sub-Agents/,/^## /{ /^## Installed Sub-Agents/d; /^## /!d; }' "$claude_file" 2>/dev/null || \
            sed -i '' '/## Installed Sub-Agents/,/^## /{ /^## Installed Sub-Agents/d; /^## /!d; }' "$claude_file"
        fi
    fi
    
    print_info "$update_type CLAUDE.md with agent instructions..."
    
    # Prepare the agent documentation section
    local agent_docs="

## Installed Sub-Agents

This project has the following specialized AI sub-agents available:

### Available Agents
"
    
    # Add each agent with proper categorization
    for agent in "${installed_agents[@]}"; do
        # Try to determine category
        local category="general"
        for cat in business data-ai development infrastructure quality-testing security specialization; do
            if [ -f "$SUBMODULE_DIR/$cat/$agent.md" ]; then
                category="$cat"
                break
            fi
        done
        
        agent_docs+="
- **$agent** ($category): Specialized agent for domain-specific tasks"
    done
    
    agent_docs+="

### Usage Instructions

These agents can be invoked in three ways:

1. **Automatic Invocation**: Claude Code will automatically select the appropriate agent based on your task
2. **Explicit Invocation**: Use phrases like \"Use the $agent to...\" or \"Have $agent handle this\"
3. **Agent Organizer**: For complex multi-agent workflows, the agent-organizer can coordinate multiple specialists

### Examples

\`\`\`bash
# Direct invocation
\"Use the code-reviewer to analyze this pull request\"
\"Have the security-auditor scan for vulnerabilities\"

# Multi-agent coordination
\"Use backend-architect to design the API, then have security-auditor review it\"
\`\`\`

### Agent Categories

- **business**: Product management and business analysis
- **data-ai**: Data engineering, AI/ML, and database optimization
- **development**: Frontend, backend, and full-stack development
- **infrastructure**: Cloud, DevOps, and performance engineering
- **quality-testing**: Code review, QA, and testing automation
- **security**: Security auditing and vulnerability assessment
- **specialization**: API documentation and specialized expertise

### Best Practices

- Trust automatic delegation for optimal agent selection
- Provide rich context about your requirements
- Use explicit invocation when you need specific expertise
- For complex projects, consider using the agent-organizer for multi-agent coordination

---
*Agents installed via claude-code-sub-agents repository*
"
    
    # Append to CLAUDE.md
    echo "$agent_docs" >> "$claude_file"
    
    print_success "CLAUDE.md updated with agent instructions"
}

# Function to install all agents
install_all_agents() {
    local target_dir="$1"
    local count=0
    local skipped=0
    
    print_info "Installing all available agents..."
    
    # Install from each category
    for category in business data-ai development infrastructure quality-testing security specialization; do
        if [ -d "$SUBMODULE_DIR/$category" ]; then
            [ "$VERBOSE" = true ] && print_info "Processing category: $category"
            for agent_file in "$SUBMODULE_DIR/$category"/*.md; do
                if [ -f "$agent_file" ]; then
                    set +e  # Temporarily disable exit on error
                    install_agent "$agent_file" "$target_dir"
                    install_result=$?
                    if [ $install_result -eq 0 ]; then
                        ((count++))
                    else
                        ((skipped++))
                    fi
                    set -e  # Re-enable exit on error
                fi
            done
        fi
    done
    
    # Install root-level agents
    for agent_file in "$SUBMODULE_DIR"/*.md; do
        if [ -f "$agent_file" ] && [ "$(basename "$agent_file")" != "README.md" ] && [ "$(basename "$agent_file")" != "CLAUDE.md" ]; then
            set +e  # Temporarily disable exit on error
            install_agent "$agent_file" "$target_dir"
            install_result=$?
            if [ $install_result -eq 0 ]; then
                ((count++))
            else
                ((skipped++))
            fi
            set -e  # Re-enable exit on error
        fi
    done
    
    print_success "Installation complete: $count agents installed, $skipped skipped"
}

# Parse command line arguments
POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            show_help
            exit 0
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --all)
            INSTALL_ALL=true
            shift
            ;;
        --list)
            list_agents
            exit 0
            ;;
        --profile)
            if [ -z "$2" ]; then
                print_error "--profile requires a profile name"
                exit 1
            fi
            PROFILE_NAME="$2"
            shift 2
            ;;
        --list-profiles)
            LIST_PROFILES=true
            shift
            ;;
        --show-profile)
            if [ -z "$2" ]; then
                print_error "--show-profile requires a profile name"
                exit 1
            fi
            SHOW_PROFILE="$2"
            shift 2
            ;;
        --simple)
            INSTALL_SIMPLE=true
            shift
            ;;
        --simple-read)
            SIMPLE_READ=true
            shift
            ;;
        --simple-write)
            SIMPLE_WRITE=true
            shift
            ;;
        --simple-bash)
            SIMPLE_BASH=true
            shift
            ;;
        --simple-grep)
            SIMPLE_GREP=true
            shift
            ;;
        --simple-edit)
            SIMPLE_EDIT=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --skip-speak-check)
            SKIP_SPEAK_CHECK=true
            shift
            ;;
        -*)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done

# Restore positional parameters
set -- "${POSITIONAL_ARGS[@]}"

# Handle profile-only commands first
if [ "$LIST_PROFILES" = true ]; then
    list_profiles
    exit 0
fi

if [ ! -z "$SHOW_PROFILE" ]; then
    show_profile "$SHOW_PROFILE"
    exit 0
fi

# Check if submodule is initialized
if [ ! -d "$SUBMODULE_DIR" ]; then
    print_error "Submodule not found at: $SUBMODULE_DIR"
    print_info "Initializing submodule..."
    git submodule update --init --recursive
    if [ ! -d "$SUBMODULE_DIR" ]; then
        print_error "Failed to initialize submodule"
        exit 1
    fi
fi

# Validate arguments
if [ $# -eq 0 ]; then
    print_error "No target project path specified"
    show_help
    exit 1
fi

TARGET_PROJECT="$1"
shift

# Convert to absolute path
TARGET_PROJECT="$(cd "$TARGET_PROJECT" 2>/dev/null && pwd)" || {
    print_error "Target project path does not exist: $TARGET_PROJECT"
    exit 1
}

# Create .claude/agents directory if it doesn't exist
TARGET_AGENTS_DIR="$TARGET_PROJECT/.claude/agents"
if [ ! -d "$TARGET_AGENTS_DIR" ]; then
    print_info "Creating agents directory: $TARGET_AGENTS_DIR"
    mkdir -p "$TARGET_AGENTS_DIR"
fi

# Check speak command
check_speak_command || true

# Main installation logic
print_info "Installing agents to: $TARGET_AGENTS_DIR"
[ "$DRY_RUN" = true ] && print_warning "DRY-RUN MODE: No changes will be made"

# Check for simple agents installation
if [ "$INSTALL_SIMPLE" = true ]; then
    install_all_simple_agents "$TARGET_AGENTS_DIR"
elif [ "$SIMPLE_READ" = true ] || [ "$SIMPLE_WRITE" = true ] || [ "$SIMPLE_BASH" = true ] || [ "$SIMPLE_GREP" = true ] || [ "$SIMPLE_EDIT" = true ]; then
    # Install specific simple agent categories
    any_installed=false
    
    if [ "$SIMPLE_READ" = true ]; then
        install_simple_agents_category "read" "$TARGET_AGENTS_DIR" "Read Agents (Analyzers)"
        any_installed=true
    fi
    
    if [ "$SIMPLE_WRITE" = true ]; then
        install_simple_agents_category "write" "$TARGET_AGENTS_DIR" "Write Agents (Generators)"
        any_installed=true
    fi
    
    if [ "$SIMPLE_BASH" = true ]; then
        install_simple_agents_category "bash" "$TARGET_AGENTS_DIR" "Bash Agents (Executors)"
        any_installed=true
    fi
    
    if [ "$SIMPLE_GREP" = true ]; then
        install_simple_agents_category "grep" "$TARGET_AGENTS_DIR" "Grep Agents (Searchers)"
        any_installed=true
    fi
    
    if [ "$SIMPLE_EDIT" = true ]; then
        install_simple_agents_category "edit" "$TARGET_AGENTS_DIR" "Edit Agents (Modifiers)"
        any_installed=true
    fi
    
    if [ "$any_installed" = true ]; then
        echo ""
        print_success "Simple agent categories installation complete!"
        echo ""
        echo "💡 Usage examples:"
        echo -e "  ${YELLOW}@config-reader${NC} - Read and parse config files"
        echo -e "  ${YELLOW}@error-finder${NC} - Find all errors in codebase"
        echo -e "  ${YELLOW}@test-runner${NC} - Run test suite"
        echo ""
    fi
elif [ "$INSTALL_ALL" = true ]; then
    install_all_agents "$TARGET_AGENTS_DIR"
elif [ ! -z "$PROFILE_NAME" ]; then
    # Install from profile
    install_profile "$PROFILE_NAME" "$TARGET_AGENTS_DIR"
elif [ $# -eq 0 ]; then
    print_error "No agents or installation option specified."
    echo ""
    echo -e "${YELLOW}Available options:${NC}"
    echo "  --all                Install all available agents"
    echo "  --simple             Install all simple single-tool agents"
    echo "  --simple-read        Install Read-based agents only"
    echo "  --simple-write       Install Write-based agents only"
    echo "  --simple-bash        Install Bash-based agents only"
    echo "  --simple-grep        Install Grep-based agents only"
    echo "  --simple-edit        Install Edit-based agents only"
    echo "  --profile <name>     Install agents from a profile"
    echo "  [agent-names...]     Install specific named agents"
    echo ""
    print_info "Use --list to see available agents or --list-profiles to see available profiles"
    exit 1
else
    # Install specific agents
    count=0
    failed=0
    
    for agent_name in "$@"; do
        set +e  # Temporarily disable exit on error for this loop iteration
        
        if agent_file=$(find_agent_file "$agent_name" 2>/dev/null) && [ -n "$agent_file" ]; then
            install_agent "$agent_file" "$TARGET_AGENTS_DIR"
            install_result=$?
            if [ $install_result -eq 0 ]; then
                ((count++))
            else
                ((failed++))
            fi
        else
            print_error "Agent not found: $agent_name"
            ((failed++))
        fi
        
        set -e  # Re-enable exit on error
    done
    
    if [ $count -gt 0 ]; then
        print_success "Installation complete: $count agents installed"
    fi
    
    if [ $failed -gt 0 ]; then
        print_warning "$failed agents failed or skipped"
    fi
fi

# Update CLAUDE.md with agent instructions
if [ "$DRY_RUN" = false ]; then
    update_claude_md "$TARGET_PROJECT"
fi

# Final message
if [ "$DRY_RUN" = false ]; then
    print_success "✨ Agent installation complete!"
    print_info "Agents are now available in: $TARGET_AGENTS_DIR"
    print_info "Use them in Claude Code with @agent-name or explicit invocation"
fi
